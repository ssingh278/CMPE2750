
Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000064  00800100  000014ec  00001580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000014ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000062  00800164  00800164  000015e4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001640  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017cf  00000000  00000000  000017e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bd0  00000000  00000000  00002faf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e43  00000000  00000000  00003b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000348  00000000  00000000  000049c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000086d  00000000  00000000  00004d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b6e  00000000  00000000  00005579  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  000060e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__vector_11>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ec ee       	ldi	r30, 0xEC	; 236
      7c:	f4 e1       	ldi	r31, 0x14	; 20
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a4 36       	cpi	r26, 0x64	; 100
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	21 e0       	ldi	r18, 0x01	; 1
      8c:	a4 e6       	ldi	r26, 0x64	; 100
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 3c       	cpi	r26, 0xC6	; 198
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 72 04 	call	0x8e4	; 0x8e4 <main>
      9e:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <I2C_Init>:

		// wait for stop to automatically clear (stop completed)
		while (TWCR & 0x10)
		;
	}
}
      a6:	cf 92       	push	r12
      a8:	df 92       	push	r13
      aa:	ef 92       	push	r14
      ac:	ff 92       	push	r15
      ae:	e4 e6       	ldi	r30, 0x64	; 100
      b0:	f0 e0       	ldi	r31, 0x00	; 0
      b2:	20 81       	ld	r18, Z
      b4:	2f 77       	andi	r18, 0x7F	; 127
      b6:	20 83       	st	Z, r18
      b8:	44 23       	and	r20, r20
      ba:	19 f0       	breq	.+6      	; 0xc2 <I2C_Init+0x1c>
      bc:	41 30       	cpi	r20, 0x01	; 1
      be:	c1 f0       	breq	.+48     	; 0xf0 <I2C_Init+0x4a>
      c0:	2e c0       	rjmp	.+92     	; 0x11e <I2C_Init+0x78>
      c2:	0e 94 66 06 	call	0xccc	; 0xccc <__floatunsisf>
      c6:	20 e0       	ldi	r18, 0x00	; 0
      c8:	30 e0       	ldi	r19, 0x00	; 0
      ca:	40 e0       	ldi	r20, 0x00	; 0
      cc:	5f e3       	ldi	r21, 0x3F	; 63
      ce:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__mulsf3>
      d2:	20 e0       	ldi	r18, 0x00	; 0
      d4:	30 e5       	ldi	r19, 0x50	; 80
      d6:	43 ec       	ldi	r20, 0xC3	; 195
      d8:	57 e4       	ldi	r21, 0x47	; 71
      da:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__divsf3>
      de:	20 e0       	ldi	r18, 0x00	; 0
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	40 e0       	ldi	r20, 0x00	; 0
      e4:	51 e4       	ldi	r21, 0x41	; 65
      e6:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__subsf3>
      ea:	6b 01       	movw	r12, r22
      ec:	7c 01       	movw	r14, r24
      ee:	1a c0       	rjmp	.+52     	; 0x124 <I2C_Init+0x7e>
      f0:	0e 94 66 06 	call	0xccc	; 0xccc <__floatunsisf>
      f4:	20 e0       	ldi	r18, 0x00	; 0
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	40 e0       	ldi	r20, 0x00	; 0
      fa:	5f e3       	ldi	r21, 0x3F	; 63
      fc:	0e 94 1d 07 	call	0xe3a	; 0xe3a <__mulsf3>
     100:	20 e0       	ldi	r18, 0x00	; 0
     102:	30 e5       	ldi	r19, 0x50	; 80
     104:	43 ec       	ldi	r20, 0xC3	; 195
     106:	58 e4       	ldi	r21, 0x48	; 72
     108:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__divsf3>
     10c:	20 e0       	ldi	r18, 0x00	; 0
     10e:	30 e0       	ldi	r19, 0x00	; 0
     110:	40 e0       	ldi	r20, 0x00	; 0
     112:	51 e4       	ldi	r21, 0x41	; 65
     114:	0e 94 53 05 	call	0xaa6	; 0xaa6 <__subsf3>
     118:	6b 01       	movw	r12, r22
     11a:	7c 01       	movw	r14, r24
     11c:	03 c0       	rjmp	.+6      	; 0x124 <I2C_Init+0x7e>
     11e:	c1 2c       	mov	r12, r1
     120:	d1 2c       	mov	r13, r1
     122:	76 01       	movw	r14, r12
     124:	20 e0       	ldi	r18, 0x00	; 0
     126:	30 e0       	ldi	r19, 0x00	; 0
     128:	40 e8       	ldi	r20, 0x80	; 128
     12a:	5f e3       	ldi	r21, 0x3F	; 63
     12c:	c7 01       	movw	r24, r14
     12e:	b6 01       	movw	r22, r12
     130:	0e 94 c0 05 	call	0xb80	; 0xb80 <__cmpsf2>
     134:	88 23       	and	r24, r24
     136:	c4 f0       	brlt	.+48     	; 0x168 <I2C_Init+0xc2>
     138:	20 e0       	ldi	r18, 0x00	; 0
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	4f e7       	ldi	r20, 0x7F	; 127
     13e:	53 e4       	ldi	r21, 0x43	; 67
     140:	c7 01       	movw	r24, r14
     142:	b6 01       	movw	r22, r12
     144:	0e 94 18 07 	call	0xe30	; 0xe30 <__gesf2>
     148:	18 16       	cp	r1, r24
     14a:	8c f0       	brlt	.+34     	; 0x16e <I2C_Init+0xc8>
     14c:	c7 01       	movw	r24, r14
     14e:	b6 01       	movw	r22, r12
     150:	0e 94 37 06 	call	0xc6e	; 0xc6e <__fixunssfsi>
     154:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     158:	ec eb       	ldi	r30, 0xBC	; 188
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	80 81       	ld	r24, Z
     15e:	84 60       	ori	r24, 0x04	; 4
     160:	80 83       	st	Z, r24
     162:	80 e0       	ldi	r24, 0x00	; 0
     164:	90 e0       	ldi	r25, 0x00	; 0
     166:	05 c0       	rjmp	.+10     	; 0x172 <I2C_Init+0xcc>
     168:	8f ef       	ldi	r24, 0xFF	; 255
     16a:	9f ef       	ldi	r25, 0xFF	; 255
     16c:	02 c0       	rjmp	.+4      	; 0x172 <I2C_Init+0xcc>
     16e:	8f ef       	ldi	r24, 0xFF	; 255
     170:	9f ef       	ldi	r25, 0xFF	; 255
     172:	ff 90       	pop	r15
     174:	ef 90       	pop	r14
     176:	df 90       	pop	r13
     178:	cf 90       	pop	r12
     17a:	08 95       	ret

0000017c <I2C_Start>:
     17c:	94 ea       	ldi	r25, 0xA4	; 164
     17e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     182:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     186:	99 23       	and	r25, r25
     188:	e4 f7       	brge	.-8      	; 0x182 <I2C_Start+0x6>
     18a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     18e:	98 7f       	andi	r25, 0xF8	; 248
     190:	98 30       	cpi	r25, 0x08	; 8
     192:	29 f0       	breq	.+10     	; 0x19e <I2C_Start+0x22>
     194:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     198:	98 7f       	andi	r25, 0xF8	; 248
     19a:	90 31       	cpi	r25, 0x10	; 16
     19c:	49 f5       	brne	.+82     	; 0x1f0 <I2C_Start+0x74>
     19e:	67 2b       	or	r22, r23
     1a0:	a9 f0       	breq	.+42     	; 0x1cc <I2C_Start+0x50>
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	88 0f       	add	r24, r24
     1a6:	99 1f       	adc	r25, r25
     1a8:	81 60       	ori	r24, 0x01	; 1
     1aa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     1ae:	84 e8       	ldi	r24, 0x84	; 132
     1b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1b4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1b8:	88 23       	and	r24, r24
     1ba:	e4 f7       	brge	.-8      	; 0x1b4 <I2C_Start+0x38>
     1bc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     1c0:	88 7f       	andi	r24, 0xF8	; 248
     1c2:	80 34       	cpi	r24, 0x40	; 64
     1c4:	c1 f0       	breq	.+48     	; 0x1f6 <I2C_Start+0x7a>
     1c6:	8e ef       	ldi	r24, 0xFE	; 254
     1c8:	9f ef       	ldi	r25, 0xFF	; 255
     1ca:	08 95       	ret
     1cc:	88 0f       	add	r24, r24
     1ce:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     1d2:	84 e8       	ldi	r24, 0x84	; 132
     1d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1d8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     1dc:	88 23       	and	r24, r24
     1de:	e4 f7       	brge	.-8      	; 0x1d8 <I2C_Start+0x5c>
     1e0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     1e4:	88 7f       	andi	r24, 0xF8	; 248
     1e6:	88 31       	cpi	r24, 0x18	; 24
     1e8:	49 f0       	breq	.+18     	; 0x1fc <I2C_Start+0x80>
     1ea:	8e ef       	ldi	r24, 0xFE	; 254
     1ec:	9f ef       	ldi	r25, 0xFF	; 255
     1ee:	08 95       	ret
     1f0:	8f ef       	ldi	r24, 0xFF	; 255
     1f2:	9f ef       	ldi	r25, 0xFF	; 255
     1f4:	08 95       	ret
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	08 95       	ret
     1fc:	80 e0       	ldi	r24, 0x00	; 0
     1fe:	90 e0       	ldi	r25, 0x00	; 0
     200:	08 95       	ret

00000202 <I2C_Read8>:
	return 0;
}

// assumes transaction is open
int I2C_Read8 (unsigned char *ucData, int bAck, int bStop)
{
     202:	fc 01       	movw	r30, r24
	// clear TWINT, keep TWI enabled
	if (bAck)
     204:	61 15       	cp	r22, r1
     206:	71 05       	cpc	r23, r1
     208:	21 f0       	breq	.+8      	; 0x212 <I2C_Read8+0x10>
	  TWCR = 0b11000100;
     20a:	84 ec       	ldi	r24, 0xC4	; 196
     20c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     210:	03 c0       	rjmp	.+6      	; 0x218 <I2C_Read8+0x16>
	else
	  TWCR = 0b10000100;
     212:	84 e8       	ldi	r24, 0x84	; 132
     214:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// look for data sent, with TWINT bit
	while (!(TWCR & 0x80))
     218:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     21c:	99 23       	and	r25, r25
     21e:	e4 f7       	brge	.-8      	; 0x218 <I2C_Read8+0x16>
	  ;

	if (bAck)
     220:	67 2b       	or	r22, r23
     222:	31 f0       	breq	.+12     	; 0x230 <I2C_Read8+0x2e>
	{
		// look for data received, ack returned
		if ((TWSR & 0b11111000) != 0x50)
     224:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     228:	98 7f       	andi	r25, 0xF8	; 248
     22a:	90 35       	cpi	r25, 0x50	; 80
     22c:	31 f0       	breq	.+12     	; 0x23a <I2C_Read8+0x38>
     22e:	14 c0       	rjmp	.+40     	; 0x258 <I2C_Read8+0x56>
		  return -3;
	}
	else
	{
		// look for data received, ack not returned
		if ((TWSR & 0b11111000) != 0x58)
     230:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     234:	98 7f       	andi	r25, 0xF8	; 248
     236:	98 35       	cpi	r25, 0x58	; 88
     238:	91 f4       	brne	.+36     	; 0x25e <I2C_Read8+0x5c>
		  return -3;
	}

	// read the data byte
	*ucData = TWDR;
     23a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     23e:	80 83       	st	Z, r24
	
	// if stop requested, send it
	if (bStop)
     240:	45 2b       	or	r20, r21
     242:	81 f0       	breq	.+32     	; 0x264 <I2C_Read8+0x62>
	{
		// send STOP
		TWCR = 0b10010100;
     244:	84 e9       	ldi	r24, 0x94	; 148
     246:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

		// wait for stop to automatically clear (stop completed)
		while (TWCR & 0x10)
     24a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     24e:	84 fd       	sbrc	r24, 4
     250:	fc cf       	rjmp	.-8      	; 0x24a <I2C_Read8+0x48>
			;
	}

	return 0;
     252:	80 e0       	ldi	r24, 0x00	; 0
     254:	90 e0       	ldi	r25, 0x00	; 0
     256:	08 95       	ret

	if (bAck)
	{
		// look for data received, ack returned
		if ((TWSR & 0b11111000) != 0x50)
		  return -3;
     258:	8d ef       	ldi	r24, 0xFD	; 253
     25a:	9f ef       	ldi	r25, 0xFF	; 255
     25c:	08 95       	ret
	}
	else
	{
		// look for data received, ack not returned
		if ((TWSR & 0b11111000) != 0x58)
		  return -3;
     25e:	8d ef       	ldi	r24, 0xFD	; 253
     260:	9f ef       	ldi	r25, 0xFF	; 255
     262:	08 95       	ret
		// wait for stop to automatically clear (stop completed)
		while (TWCR & 0x10)
			;
	}

	return 0;
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	90 e0       	ldi	r25, 0x00	; 0
}
     268:	08 95       	ret

0000026a <I2C_Write8>:

// assumes transaction is open
int I2C_Write8 (unsigned char ucData, int bStop)
{
	// enter master write mode
	TWDR = ucData;
     26a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>

	// clear TWINT, no START, keep TWI enabled
	TWCR = 0b10000100;
     26e:	84 e8       	ldi	r24, 0x84	; 132
     270:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// look for data sent, with TWINT bit
	while (!(TWCR & 0x80))
     274:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     278:	88 23       	and	r24, r24
     27a:	e4 f7       	brge	.-8      	; 0x274 <I2C_Write8+0xa>
	  ;

	// look for data sent with ACK
	if ((TWSR & 0b11111000) != 0x28)
     27c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     280:	88 7f       	andi	r24, 0xF8	; 248
     282:	88 32       	cpi	r24, 0x28	; 40
     284:	61 f4       	brne	.+24     	; 0x29e <I2C_Write8+0x34>
	  return -3;
	
	// if stop requested, send it
	if (bStop)
     286:	67 2b       	or	r22, r23
     288:	69 f0       	breq	.+26     	; 0x2a4 <I2C_Write8+0x3a>
	{
		// send STOP
		TWCR = 0b10010100;
     28a:	84 e9       	ldi	r24, 0x94	; 148
     28c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

		// wait for stop to automatically clear (stop completed)
		while (TWCR & 0x10)
     290:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     294:	84 fd       	sbrc	r24, 4
     296:	fc cf       	rjmp	.-8      	; 0x290 <I2C_Write8+0x26>
			;
	}

	return 0;
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	08 95       	ret
	while (!(TWCR & 0x80))
	  ;

	// look for data sent with ACK
	if ((TWSR & 0b11111000) != 0x28)
	  return -3;
     29e:	8d ef       	ldi	r24, 0xFD	; 253
     2a0:	9f ef       	ldi	r25, 0xFF	; 255
     2a2:	08 95       	ret
		// wait for stop to automatically clear (stop completed)
		while (TWCR & 0x10)
			;
	}

	return 0;
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	90 e0       	ldi	r25, 0x00	; 0
}
     2a8:	08 95       	ret

000002aa <PCF8574A_Write>:

// set addr in A to LCD
void LCD_Addr (unsigned char addr)
{
	addr |= 0x80;
	LCD_Inst (addr);
     2aa:	cf 93       	push	r28
     2ac:	c8 2f       	mov	r28, r24
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	70 e0       	ldi	r23, 0x00	; 0
     2b2:	87 e2       	ldi	r24, 0x27	; 39
     2b4:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Start>
     2b8:	89 2b       	or	r24, r25
     2ba:	51 f4       	brne	.+20     	; 0x2d0 <PCF8574A_Write+0x26>
     2bc:	61 e0       	ldi	r22, 0x01	; 1
     2be:	70 e0       	ldi	r23, 0x00	; 0
     2c0:	8c 2f       	mov	r24, r28
     2c2:	0e 94 35 01 	call	0x26a	; 0x26a <I2C_Write8>
     2c6:	00 97       	sbiw	r24, 0x00	; 0
     2c8:	29 f0       	breq	.+10     	; 0x2d4 <PCF8574A_Write+0x2a>
     2ca:	8e ef       	ldi	r24, 0xFE	; 254
     2cc:	9f ef       	ldi	r25, 0xFF	; 255
     2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <PCF8574A_Write+0x2a>
     2d0:	8f ef       	ldi	r24, 0xFF	; 255
     2d2:	9f ef       	ldi	r25, 0xFF	; 255
     2d4:	cf 91       	pop	r28
     2d6:	08 95       	ret

000002d8 <PCF8574A_Read>:
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	ec 01       	movw	r28, r24
     2de:	61 e0       	ldi	r22, 0x01	; 1
     2e0:	70 e0       	ldi	r23, 0x00	; 0
     2e2:	87 e2       	ldi	r24, 0x27	; 39
     2e4:	0e 94 be 00 	call	0x17c	; 0x17c <I2C_Start>
     2e8:	89 2b       	or	r24, r25
     2ea:	61 f4       	brne	.+24     	; 0x304 <PCF8574A_Read+0x2c>
     2ec:	41 e0       	ldi	r20, 0x01	; 1
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	60 e0       	ldi	r22, 0x00	; 0
     2f2:	70 e0       	ldi	r23, 0x00	; 0
     2f4:	ce 01       	movw	r24, r28
     2f6:	0e 94 01 01 	call	0x202	; 0x202 <I2C_Read8>
     2fa:	00 97       	sbiw	r24, 0x00	; 0
     2fc:	29 f0       	breq	.+10     	; 0x308 <PCF8574A_Read+0x30>
     2fe:	8e ef       	ldi	r24, 0xFE	; 254
     300:	9f ef       	ldi	r25, 0xFF	; 255
     302:	02 c0       	rjmp	.+4      	; 0x308 <PCF8574A_Read+0x30>
     304:	8f ef       	ldi	r24, 0xFF	; 255
     306:	9f ef       	ldi	r25, 0xFF	; 255
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	08 95       	ret

0000030e <LCD_InitDelay>:
     30e:	8f e4       	ldi	r24, 0x4F	; 79
     310:	93 ec       	ldi	r25, 0xC3	; 195
     312:	01 97       	sbiw	r24, 0x01	; 1
     314:	f1 f7       	brne	.-4      	; 0x312 <LCD_InitDelay+0x4>
     316:	00 c0       	rjmp	.+0      	; 0x318 <LCD_InitDelay+0xa>
     318:	00 00       	nop
     31a:	08 95       	ret

0000031c <LCD_CmdDelay>:
     31c:	86 e0       	ldi	r24, 0x06	; 6
     31e:	8a 95       	dec	r24
     320:	f1 f7       	brne	.-4      	; 0x31e <LCD_CmdDelay+0x2>
     322:	00 c0       	rjmp	.+0      	; 0x324 <LCD_CmdDelay+0x8>
     324:	08 95       	ret

00000326 <LCD_WritePort>:
     326:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <LCD_PORT>
     32a:	0e 94 55 01 	call	0x2aa	; 0x2aa <PCF8574A_Write>
     32e:	00 97       	sbiw	r24, 0x00	; 0
     330:	11 f0       	breq	.+4      	; 0x336 <LCD_WritePort+0x10>
     332:	8f ef       	ldi	r24, 0xFF	; 255
     334:	9f ef       	ldi	r25, 0xFF	; 255
     336:	08 95       	ret

00000338 <LCD_ReadPort>:
     338:	85 ec       	ldi	r24, 0xC5	; 197
     33a:	91 e0       	ldi	r25, 0x01	; 1
     33c:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <PCF8574A_Read>
     340:	00 97       	sbiw	r24, 0x00	; 0
     342:	11 f0       	breq	.+4      	; 0x348 <LCD_ReadPort+0x10>
     344:	8f ef       	ldi	r24, 0xFF	; 255
     346:	9f ef       	ldi	r25, 0xFF	; 255
     348:	08 95       	ret

0000034a <LCD_Busy>:
     34a:	0f 93       	push	r16
     34c:	1f 93       	push	r17
     34e:	cf 93       	push	r28
     350:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <LCD_PORT>
     354:	80 6f       	ori	r24, 0xF0	; 240
     356:	8b 7f       	andi	r24, 0xFB	; 251
     358:	82 60       	ori	r24, 0x02	; 2
     35a:	8e 7f       	andi	r24, 0xFE	; 254
     35c:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <LCD_PORT>
     360:	0e 94 93 01 	call	0x326	; 0x326 <LCD_WritePort>
     364:	89 2b       	or	r24, r25
     366:	09 f0       	breq	.+2      	; 0x36a <LCD_Busy+0x20>
     368:	43 c0       	rjmp	.+134    	; 0x3f0 <LCD_Busy+0xa6>
     36a:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_CmdDelay>
     36e:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <LCD_PORT>
     372:	84 60       	ori	r24, 0x04	; 4
     374:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <LCD_PORT>
     378:	0e 94 93 01 	call	0x326	; 0x326 <LCD_WritePort>
     37c:	89 2b       	or	r24, r25
     37e:	d9 f5       	brne	.+118    	; 0x3f6 <LCD_Busy+0xac>
     380:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_CmdDelay>
     384:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_ReadPort>
     388:	89 2b       	or	r24, r25
     38a:	c1 f5       	brne	.+112    	; 0x3fc <LCD_Busy+0xb2>
     38c:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <LCD_PORT>
     390:	98 2f       	mov	r25, r24
     392:	92 95       	swap	r25
     394:	9f 70       	andi	r25, 0x0F	; 15
     396:	c9 2f       	mov	r28, r25
     398:	c8 70       	andi	r28, 0x08	; 8
     39a:	80 6f       	ori	r24, 0xF0	; 240
     39c:	8b 7f       	andi	r24, 0xFB	; 251
     39e:	88 60       	ori	r24, 0x08	; 8
     3a0:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <LCD_PORT>
     3a4:	0e 94 93 01 	call	0x326	; 0x326 <LCD_WritePort>
     3a8:	89 2b       	or	r24, r25
     3aa:	59 f5       	brne	.+86     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
     3ac:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_CmdDelay>
     3b0:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <LCD_PORT>
     3b4:	84 60       	ori	r24, 0x04	; 4
     3b6:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <LCD_PORT>
     3ba:	0e 94 93 01 	call	0x326	; 0x326 <LCD_WritePort>
     3be:	89 2b       	or	r24, r25
     3c0:	19 f5       	brne	.+70     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
     3c2:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_CmdDelay>
     3c6:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_ReadPort>
     3ca:	89 2b       	or	r24, r25
     3cc:	01 f5       	brne	.+64     	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
     3ce:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <LCD_PORT>
     3d2:	80 6f       	ori	r24, 0xF0	; 240
     3d4:	8b 7f       	andi	r24, 0xFB	; 251
     3d6:	88 60       	ori	r24, 0x08	; 8
     3d8:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <LCD_PORT>
     3dc:	0e 94 93 01 	call	0x326	; 0x326 <LCD_WritePort>
     3e0:	8c 01       	movw	r16, r24
     3e2:	89 2b       	or	r24, r25
     3e4:	b9 f4       	brne	.+46     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
     3e6:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_CmdDelay>
     3ea:	c1 11       	cpse	r28, r1
     3ec:	c0 cf       	rjmp	.-128    	; 0x36e <LCD_Busy+0x24>
     3ee:	14 c0       	rjmp	.+40     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     3f0:	0f ef       	ldi	r16, 0xFF	; 255
     3f2:	1f ef       	ldi	r17, 0xFF	; 255
     3f4:	11 c0       	rjmp	.+34     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     3f6:	0f ef       	ldi	r16, 0xFF	; 255
     3f8:	1f ef       	ldi	r17, 0xFF	; 255
     3fa:	0e c0       	rjmp	.+28     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     3fc:	0e ef       	ldi	r16, 0xFE	; 254
     3fe:	1f ef       	ldi	r17, 0xFF	; 255
     400:	0b c0       	rjmp	.+22     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     402:	0f ef       	ldi	r16, 0xFF	; 255
     404:	1f ef       	ldi	r17, 0xFF	; 255
     406:	08 c0       	rjmp	.+16     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     408:	0f ef       	ldi	r16, 0xFF	; 255
     40a:	1f ef       	ldi	r17, 0xFF	; 255
     40c:	05 c0       	rjmp	.+10     	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     40e:	0e ef       	ldi	r16, 0xFE	; 254
     410:	1f ef       	ldi	r17, 0xFF	; 255
     412:	02 c0       	rjmp	.+4      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
     414:	0f ef       	ldi	r16, 0xFF	; 255
     416:	1f ef       	ldi	r17, 0xFF	; 255
     418:	c8 01       	movw	r24, r16
     41a:	cf 91       	pop	r28
     41c:	1f 91       	pop	r17
     41e:	0f 91       	pop	r16
     420:	08 95       	ret

00000422 <LCD_Inst>:
     422:	cf 93       	push	r28
     424:	df 93       	push	r29
     426:	c8 2f       	mov	r28, r24
     428:	0e 94 a5 01 	call	0x34a	; 0x34a <LCD_Busy>
     42c:	9c 2f       	mov	r25, r28
     42e:	90 7f       	andi	r25, 0xF0	; 240
     430:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <LCD_PORT>
     434:	8f 70       	andi	r24, 0x0F	; 15
     436:	89 2b       	or	r24, r25
     438:	84 60       	ori	r24, 0x04	; 4
     43a:	8d 7f       	andi	r24, 0xFD	; 253
     43c:	8e 7f       	andi	r24, 0xFE	; 254
     43e:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <LCD_PORT>
     442:	0e 94 93 01 	call	0x326	; 0x326 <LCD_WritePort>
     446:	89 2b       	or	r24, r25
     448:	49 f5       	brne	.+82     	; 0x49c <LCD_Inst+0x7a>
     44a:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_CmdDelay>
     44e:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <LCD_PORT>
     452:	8b 7f       	andi	r24, 0xFB	; 251
     454:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <LCD_PORT>
     458:	0e 94 93 01 	call	0x326	; 0x326 <LCD_WritePort>
     45c:	89 2b       	or	r24, r25
     45e:	09 f5       	brne	.+66     	; 0x4a2 <LCD_Inst+0x80>
     460:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_CmdDelay>
     464:	c2 95       	swap	r28
     466:	c0 7f       	andi	r28, 0xF0	; 240
     468:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <LCD_PORT>
     46c:	8f 70       	andi	r24, 0x0F	; 15
     46e:	c8 2b       	or	r28, r24
     470:	c4 60       	ori	r28, 0x04	; 4
     472:	c0 93 c5 01 	sts	0x01C5, r28	; 0x8001c5 <LCD_PORT>
     476:	0e 94 93 01 	call	0x326	; 0x326 <LCD_WritePort>
     47a:	89 2b       	or	r24, r25
     47c:	a9 f4       	brne	.+42     	; 0x4a8 <LCD_Inst+0x86>
     47e:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_CmdDelay>
     482:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <LCD_PORT>
     486:	8b 7f       	andi	r24, 0xFB	; 251
     488:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <LCD_PORT>
     48c:	0e 94 93 01 	call	0x326	; 0x326 <LCD_WritePort>
     490:	ec 01       	movw	r28, r24
     492:	89 2b       	or	r24, r25
     494:	61 f4       	brne	.+24     	; 0x4ae <LCD_Inst+0x8c>
     496:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_CmdDelay>
     49a:	0b c0       	rjmp	.+22     	; 0x4b2 <LCD_Inst+0x90>
     49c:	cf ef       	ldi	r28, 0xFF	; 255
     49e:	df ef       	ldi	r29, 0xFF	; 255
     4a0:	08 c0       	rjmp	.+16     	; 0x4b2 <LCD_Inst+0x90>
     4a2:	cf ef       	ldi	r28, 0xFF	; 255
     4a4:	df ef       	ldi	r29, 0xFF	; 255
     4a6:	05 c0       	rjmp	.+10     	; 0x4b2 <LCD_Inst+0x90>
     4a8:	cf ef       	ldi	r28, 0xFF	; 255
     4aa:	df ef       	ldi	r29, 0xFF	; 255
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <LCD_Inst+0x90>
     4ae:	cf ef       	ldi	r28, 0xFF	; 255
     4b0:	df ef       	ldi	r29, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	df 91       	pop	r29
     4b6:	cf 91       	pop	r28
     4b8:	08 95       	ret

000004ba <LCD_Data>:
     4ba:	cf 93       	push	r28
     4bc:	df 93       	push	r29
     4be:	c8 2f       	mov	r28, r24
     4c0:	0e 94 a5 01 	call	0x34a	; 0x34a <LCD_Busy>
     4c4:	9c 2f       	mov	r25, r28
     4c6:	90 7f       	andi	r25, 0xF0	; 240
     4c8:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <LCD_PORT>
     4cc:	8f 70       	andi	r24, 0x0F	; 15
     4ce:	89 2b       	or	r24, r25
     4d0:	84 60       	ori	r24, 0x04	; 4
     4d2:	8d 7f       	andi	r24, 0xFD	; 253
     4d4:	81 60       	ori	r24, 0x01	; 1
     4d6:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <LCD_PORT>
     4da:	0e 94 93 01 	call	0x326	; 0x326 <LCD_WritePort>
     4de:	89 2b       	or	r24, r25
     4e0:	49 f5       	brne	.+82     	; 0x534 <LCD_Data+0x7a>
     4e2:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_CmdDelay>
     4e6:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <LCD_PORT>
     4ea:	8b 7f       	andi	r24, 0xFB	; 251
     4ec:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <LCD_PORT>
     4f0:	0e 94 93 01 	call	0x326	; 0x326 <LCD_WritePort>
     4f4:	89 2b       	or	r24, r25
     4f6:	09 f5       	brne	.+66     	; 0x53a <LCD_Data+0x80>
     4f8:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_CmdDelay>
     4fc:	c2 95       	swap	r28
     4fe:	c0 7f       	andi	r28, 0xF0	; 240
     500:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <LCD_PORT>
     504:	8f 70       	andi	r24, 0x0F	; 15
     506:	c8 2b       	or	r28, r24
     508:	c4 60       	ori	r28, 0x04	; 4
     50a:	c0 93 c5 01 	sts	0x01C5, r28	; 0x8001c5 <LCD_PORT>
     50e:	0e 94 93 01 	call	0x326	; 0x326 <LCD_WritePort>
     512:	89 2b       	or	r24, r25
     514:	a9 f4       	brne	.+42     	; 0x540 <LCD_Data+0x86>
     516:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_CmdDelay>
     51a:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <LCD_PORT>
     51e:	8b 7f       	andi	r24, 0xFB	; 251
     520:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <LCD_PORT>
     524:	0e 94 93 01 	call	0x326	; 0x326 <LCD_WritePort>
     528:	ec 01       	movw	r28, r24
     52a:	89 2b       	or	r24, r25
     52c:	61 f4       	brne	.+24     	; 0x546 <LCD_Data+0x8c>
     52e:	0e 94 8e 01 	call	0x31c	; 0x31c <LCD_CmdDelay>
     532:	0b c0       	rjmp	.+22     	; 0x54a <LCD_Data+0x90>
     534:	cf ef       	ldi	r28, 0xFF	; 255
     536:	df ef       	ldi	r29, 0xFF	; 255
     538:	08 c0       	rjmp	.+16     	; 0x54a <LCD_Data+0x90>
     53a:	cf ef       	ldi	r28, 0xFF	; 255
     53c:	df ef       	ldi	r29, 0xFF	; 255
     53e:	05 c0       	rjmp	.+10     	; 0x54a <LCD_Data+0x90>
     540:	cf ef       	ldi	r28, 0xFF	; 255
     542:	df ef       	ldi	r29, 0xFF	; 255
     544:	02 c0       	rjmp	.+4      	; 0x54a <LCD_Data+0x90>
     546:	cf ef       	ldi	r28, 0xFF	; 255
     548:	df ef       	ldi	r29, 0xFF	; 255
     54a:	ce 01       	movw	r24, r28
     54c:	df 91       	pop	r29
     54e:	cf 91       	pop	r28
     550:	08 95       	ret

00000552 <LCD_Init>:
     552:	cf 93       	push	r28
     554:	df 93       	push	r29
     556:	8b ef       	ldi	r24, 0xFB	; 251
     558:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <LCD_PORT>
     55c:	0e 94 93 01 	call	0x326	; 0x326 <LCD_WritePort>
     560:	89 2b       	or	r24, r25
     562:	09 f0       	breq	.+2      	; 0x566 <LCD_Init+0x14>
     564:	4b c0       	rjmp	.+150    	; 0x5fc <LCD_Init+0xaa>
     566:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_InitDelay>
     56a:	c0 e0       	ldi	r28, 0x00	; 0
     56c:	d0 e0       	ldi	r29, 0x00	; 0
     56e:	1a c0       	rjmp	.+52     	; 0x5a4 <LCD_Init+0x52>
     570:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <LCD_PORT>
     574:	8f 70       	andi	r24, 0x0F	; 15
     576:	84 63       	ori	r24, 0x34	; 52
     578:	8d 7f       	andi	r24, 0xFD	; 253
     57a:	8e 7f       	andi	r24, 0xFE	; 254
     57c:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <LCD_PORT>
     580:	0e 94 93 01 	call	0x326	; 0x326 <LCD_WritePort>
     584:	89 2b       	or	r24, r25
     586:	e9 f5       	brne	.+122    	; 0x602 <LCD_Init+0xb0>
     588:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_InitDelay>
     58c:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <LCD_PORT>
     590:	8b 7f       	andi	r24, 0xFB	; 251
     592:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <LCD_PORT>
     596:	0e 94 93 01 	call	0x326	; 0x326 <LCD_WritePort>
     59a:	89 2b       	or	r24, r25
     59c:	a9 f5       	brne	.+106    	; 0x608 <LCD_Init+0xb6>
     59e:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_InitDelay>
     5a2:	21 96       	adiw	r28, 0x01	; 1
     5a4:	c2 30       	cpi	r28, 0x02	; 2
     5a6:	d1 05       	cpc	r29, r1
     5a8:	1c f3       	brlt	.-58     	; 0x570 <LCD_Init+0x1e>
     5aa:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <LCD_PORT>
     5ae:	8f 70       	andi	r24, 0x0F	; 15
     5b0:	80 62       	ori	r24, 0x20	; 32
     5b2:	84 60       	ori	r24, 0x04	; 4
     5b4:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <LCD_PORT>
     5b8:	0e 94 93 01 	call	0x326	; 0x326 <LCD_WritePort>
     5bc:	89 2b       	or	r24, r25
     5be:	39 f5       	brne	.+78     	; 0x60e <LCD_Init+0xbc>
     5c0:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_InitDelay>
     5c4:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <LCD_PORT>
     5c8:	8b 7f       	andi	r24, 0xFB	; 251
     5ca:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <LCD_PORT>
     5ce:	0e 94 93 01 	call	0x326	; 0x326 <LCD_WritePort>
     5d2:	ec 01       	movw	r28, r24
     5d4:	89 2b       	or	r24, r25
     5d6:	f1 f4       	brne	.+60     	; 0x614 <LCD_Init+0xc2>
     5d8:	0e 94 87 01 	call	0x30e	; 0x30e <LCD_InitDelay>
     5dc:	88 e2       	ldi	r24, 0x28	; 40
     5de:	0e 94 11 02 	call	0x422	; 0x422 <LCD_Inst>
     5e2:	8c e0       	ldi	r24, 0x0C	; 12
     5e4:	0e 94 11 02 	call	0x422	; 0x422 <LCD_Inst>
     5e8:	86 e0       	ldi	r24, 0x06	; 6
     5ea:	0e 94 11 02 	call	0x422	; 0x422 <LCD_Inst>
     5ee:	82 e0       	ldi	r24, 0x02	; 2
     5f0:	0e 94 11 02 	call	0x422	; 0x422 <LCD_Inst>
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	0e 94 11 02 	call	0x422	; 0x422 <LCD_Inst>
     5fa:	0e c0       	rjmp	.+28     	; 0x618 <LCD_Init+0xc6>
     5fc:	cf ef       	ldi	r28, 0xFF	; 255
     5fe:	df ef       	ldi	r29, 0xFF	; 255
     600:	0b c0       	rjmp	.+22     	; 0x618 <LCD_Init+0xc6>
     602:	cf ef       	ldi	r28, 0xFF	; 255
     604:	df ef       	ldi	r29, 0xFF	; 255
     606:	08 c0       	rjmp	.+16     	; 0x618 <LCD_Init+0xc6>
     608:	cf ef       	ldi	r28, 0xFF	; 255
     60a:	df ef       	ldi	r29, 0xFF	; 255
     60c:	05 c0       	rjmp	.+10     	; 0x618 <LCD_Init+0xc6>
     60e:	cf ef       	ldi	r28, 0xFF	; 255
     610:	df ef       	ldi	r29, 0xFF	; 255
     612:	02 c0       	rjmp	.+4      	; 0x618 <LCD_Init+0xc6>
     614:	cf ef       	ldi	r28, 0xFF	; 255
     616:	df ef       	ldi	r29, 0xFF	; 255
     618:	ce 01       	movw	r24, r28
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	08 95       	ret

00000620 <LCD_AddrXY>:
	// 40
	// 14
	// 54
	
	// range check
	if (iy > 3)
     620:	64 30       	cpi	r22, 0x04	; 4
     622:	98 f4       	brcc	.+38     	; 0x64a <LCD_AddrXY+0x2a>
		return;
	if (ix > 19)
     624:	84 31       	cpi	r24, 0x14	; 20
     626:	88 f4       	brcc	.+34     	; 0x64a <LCD_AddrXY+0x2a>
		return;
	
	// calculate address offset
	if (!iy)
     628:	66 23       	and	r22, r22
     62a:	31 f0       	breq	.+12     	; 0x638 <LCD_AddrXY+0x18>
		phoffset = 0x00;
	else if (iy == 1)
     62c:	61 30       	cpi	r22, 0x01	; 1
     62e:	31 f0       	breq	.+12     	; 0x63c <LCD_AddrXY+0x1c>
		phoffset = 0x40;
	else if (iy == 2)
     630:	62 30       	cpi	r22, 0x02	; 2
     632:	31 f4       	brne	.+12     	; 0x640 <LCD_AddrXY+0x20>
		phoffset = 0x14;
     634:	94 e1       	ldi	r25, 0x14	; 20
     636:	05 c0       	rjmp	.+10     	; 0x642 <LCD_AddrXY+0x22>
	if (ix > 19)
		return;
	
	// calculate address offset
	if (!iy)
		phoffset = 0x00;
     638:	90 e0       	ldi	r25, 0x00	; 0
     63a:	03 c0       	rjmp	.+6      	; 0x642 <LCD_AddrXY+0x22>
	else if (iy == 1)
		phoffset = 0x40;
     63c:	90 e4       	ldi	r25, 0x40	; 64
     63e:	01 c0       	rjmp	.+2      	; 0x642 <LCD_AddrXY+0x22>
	else if (iy == 2)
		phoffset = 0x14;
	else
		phoffset = 0x54;
     640:	94 e5       	ldi	r25, 0x54	; 84
	
	phoffset += ix;
     642:	89 0f       	add	r24, r25
	
	phoffset |= 0x80; // make into dd addr command
	
	LCD_Inst (phoffset);
     644:	80 68       	ori	r24, 0x80	; 128
     646:	0e 94 11 02 	call	0x422	; 0x422 <LCD_Inst>
     64a:	08 95       	ret

0000064c <LCD_String>:
}

void LCD_String (char * straddr)
{
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	ec 01       	movw	r28, r24
	for (; *straddr; ++straddr)
     652:	03 c0       	rjmp	.+6      	; 0x65a <LCD_String+0xe>
		LCD_Data (*straddr);
     654:	0e 94 5d 02 	call	0x4ba	; 0x4ba <LCD_Data>
	LCD_Inst (phoffset);
}

void LCD_String (char * straddr)
{
	for (; *straddr; ++straddr)
     658:	21 96       	adiw	r28, 0x01	; 1
     65a:	88 81       	ld	r24, Y
     65c:	81 11       	cpse	r24, r1
     65e:	fa cf       	rjmp	.-12     	; 0x654 <LCD_String+0x8>
		LCD_Data (*straddr);
}
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	08 95       	ret

00000666 <LCD_StringXY>:

// start the string at X/Y
void LCD_StringXY (unsigned char ix, unsigned char iy, char * straddr)
{
     666:	cf 93       	push	r28
     668:	df 93       	push	r29
	// range check
	if (iy > 3)
     66a:	64 30       	cpi	r22, 0x04	; 4
     66c:	40 f4       	brcc	.+16     	; 0x67e <LCD_StringXY+0x18>
	return;
	if (ix > 19)
     66e:	84 31       	cpi	r24, 0x14	; 20
     670:	30 f4       	brcc	.+12     	; 0x67e <LCD_StringXY+0x18>
     672:	ea 01       	movw	r28, r20
	return;

	LCD_AddrXY (ix, iy);
     674:	0e 94 10 03 	call	0x620	; 0x620 <LCD_AddrXY>
	
	// show the string...
	LCD_String (straddr);
     678:	ce 01       	movw	r24, r28
     67a:	0e 94 26 03 	call	0x64c	; 0x64c <LCD_String>
}
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	08 95       	ret

00000684 <LCD_Clear>:

// clear the display
void LCD_Clear (void)
{
	LCD_Inst (0x01);
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	0e 94 11 02 	call	0x422	; 0x422 <LCD_Inst>
     68a:	08 95       	ret

0000068c <Timer_Init>:
void Timer_Init (Timer_Prescale pre, unsigned int uiInitialOffset)
{
	// start code will power off all modules...
	// ensure power is on : Timer 1
	// PRR on 328P, PRR0 on 328PB
	PRR &= ~(1 << PRTIM1);
     68c:	e4 e6       	ldi	r30, 0x64	; 100
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	90 81       	ld	r25, Z
     692:	97 7f       	andi	r25, 0xF7	; 247
     694:	90 83       	st	Z, r25

	// set prescale to requested rate
	TCCR1B = 0;		// noise canceler disabled, waveform generator normal
     696:	e1 e8       	ldi	r30, 0x81	; 129
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	10 82       	st	Z, r1
	TCCR1B |= pre;	// put back requested prescale bits
     69c:	90 81       	ld	r25, Z
     69e:	89 2b       	or	r24, r25
     6a0:	80 83       	st	Z, r24
	
	// setup initial event for output compare 1 A
	OCR1A = TCNT1 + uiInitialOffset;
     6a2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
     6a6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
     6aa:	68 0f       	add	r22, r24
     6ac:	79 1f       	adc	r23, r25
     6ae:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     6b2:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>

	// setup interrupt for output compare
	// timer/counter 1, output compare A match interrupt enable
	TIMSK1 = 0b00000010;
     6b6:	82 e0       	ldi	r24, 0x02	; 2
     6b8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f806f>
     6bc:	08 95       	ret

000006be <init_portB>:
int SWL_Pushed (SWL_SwitchPos);

void init_portB()
{
	
	DDRB = 0xFFu;//all pin of port b as output
     6be:	8f ef       	ldi	r24, 0xFF	; 255
     6c0:	84 b9       	out	0x04, r24	; 4
	
	// Set PB1 and PB2 as input pins
	DDRB &= ~(1 << BUTTON1);
     6c2:	84 b1       	in	r24, 0x04	; 4
     6c4:	8d 7f       	andi	r24, 0xFD	; 253
     6c6:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1 << BUTTON2);
     6c8:	84 b1       	in	r24, 0x04	; 4
     6ca:	8b 7f       	andi	r24, 0xFB	; 251
     6cc:	84 b9       	out	0x04, r24	; 4

	// Enable pull-up resistors on PB1 and PB2
	PORTB |= (1 << BUTTON1);
     6ce:	85 b1       	in	r24, 0x05	; 5
     6d0:	82 60       	ori	r24, 0x02	; 2
     6d2:	85 b9       	out	0x05, r24	; 5
	PORTB |= (1 << BUTTON2);
     6d4:	85 b1       	in	r24, 0x05	; 5
     6d6:	84 60       	ori	r24, 0x04	; 4
     6d8:	85 b9       	out	0x05, r24	; 5
     6da:	08 95       	ret

000006dc <UpdateLCD>:
//Purpose: This function will update LCD 
//Parameters: no
//Returns: nothing
//****************************************************************************************** **
void UpdateLCD()
{
     6dc:	0f 93       	push	r16
     6de:	1f 93       	push	r17
     6e0:	cf 93       	push	r28
     6e2:	df 93       	push	r29
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
     6e8:	c0 55       	subi	r28, 0x50	; 80
     6ea:	d1 09       	sbc	r29, r1
     6ec:	0f b6       	in	r0, 0x3f	; 63
     6ee:	f8 94       	cli
     6f0:	de bf       	out	0x3e, r29	; 62
     6f2:	0f be       	out	0x3f, r0	; 63
     6f4:	cd bf       	out	0x3d, r28	; 61
	//updating LCD after every 500 ms
	if(_Update>=5)
     6f6:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <_Update>
     6fa:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <_Update+0x1>
     6fe:	a0 91 c3 01 	lds	r26, 0x01C3	; 0x8001c3 <_Update+0x2>
     702:	b0 91 c4 01 	lds	r27, 0x01C4	; 0x8001c4 <_Update+0x3>
     706:	05 97       	sbiw	r24, 0x05	; 5
     708:	a1 05       	cpc	r26, r1
     70a:	b1 05       	cpc	r27, r1
     70c:	08 f4       	brcc	.+2      	; 0x710 <UpdateLCD+0x34>
     70e:	5b c0       	rjmp	.+182    	; 0x7c6 <UpdateLCD+0xea>
	{
		_Update = 0; //reseting count
     710:	10 92 c1 01 	sts	0x01C1, r1	; 0x8001c1 <_Update>
     714:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <_Update+0x1>
     718:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <_Update+0x2>
     71c:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <_Update+0x3>
		char rxTime[80] = {0};
     720:	8e 01       	movw	r16, r28
     722:	0f 5f       	subi	r16, 0xFF	; 255
     724:	1f 4f       	sbci	r17, 0xFF	; 255
     726:	80 e5       	ldi	r24, 0x50	; 80
     728:	f8 01       	movw	r30, r16
     72a:	11 92       	st	Z+, r1
     72c:	8a 95       	dec	r24
     72e:	e9 f7       	brne	.-6      	; 0x72a <UpdateLCD+0x4e>
		(void)sprintf(rxTime,"Time : %02d:%02d:%02d",_hours,_minutes,_seconds);
     730:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <_seconds+0x1>
     734:	8f 93       	push	r24
     736:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <_seconds>
     73a:	8f 93       	push	r24
     73c:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <_minutes+0x1>
     740:	8f 93       	push	r24
     742:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <_minutes>
     746:	8f 93       	push	r24
     748:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <_hours+0x1>
     74c:	8f 93       	push	r24
     74e:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <_hours>
     752:	8f 93       	push	r24
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	9f 93       	push	r25
     75a:	8f 93       	push	r24
     75c:	1f 93       	push	r17
     75e:	0f 93       	push	r16
     760:	0e 94 8a 07 	call	0xf14	; 0xf14 <sprintf>
		LCD_StringXY(0,0,rxTime);
     764:	a8 01       	movw	r20, r16
     766:	60 e0       	ldi	r22, 0x00	; 0
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	0e 94 33 03 	call	0x666	; 0x666 <LCD_StringXY>
		
		// displaying the state on LCD  
		if(_state == IDLE)
     76e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <_state>
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	f8 94       	cli
     776:	de bf       	out	0x3e, r29	; 62
     778:	0f be       	out	0x3f, r0	; 63
     77a:	cd bf       	out	0x3d, r28	; 61
     77c:	81 11       	cpse	r24, r1
     77e:	05 c0       	rjmp	.+10     	; 0x78a <UpdateLCD+0xae>
			LCD_StringXY(0,1,"State : Idle   ");
     780:	46 e1       	ldi	r20, 0x16	; 22
     782:	51 e0       	ldi	r21, 0x01	; 1
     784:	61 e0       	ldi	r22, 0x01	; 1
     786:	0e 94 33 03 	call	0x666	; 0x666 <LCD_StringXY>
		if(_state == RUN)
     78a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <_state>
     78e:	81 30       	cpi	r24, 0x01	; 1
     790:	31 f4       	brne	.+12     	; 0x79e <UpdateLCD+0xc2>
			LCD_StringXY(0,1,"State : Running");
     792:	46 e2       	ldi	r20, 0x26	; 38
     794:	51 e0       	ldi	r21, 0x01	; 1
     796:	61 e0       	ldi	r22, 0x01	; 1
     798:	80 e0       	ldi	r24, 0x00	; 0
     79a:	0e 94 33 03 	call	0x666	; 0x666 <LCD_StringXY>
		if(_state == STOP)
     79e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <_state>
     7a2:	82 30       	cpi	r24, 0x02	; 2
     7a4:	31 f4       	brne	.+12     	; 0x7b2 <UpdateLCD+0xd6>
			LCD_StringXY(0,1,"State : Stop   ");
     7a6:	46 e3       	ldi	r20, 0x36	; 54
     7a8:	51 e0       	ldi	r21, 0x01	; 1
     7aa:	61 e0       	ldi	r22, 0x01	; 1
     7ac:	80 e0       	ldi	r24, 0x00	; 0
     7ae:	0e 94 33 03 	call	0x666	; 0x666 <LCD_StringXY>
		if(_state == RESET)
     7b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <_state>
     7b6:	83 30       	cpi	r24, 0x03	; 3
     7b8:	31 f4       	brne	.+12     	; 0x7c6 <UpdateLCD+0xea>
			LCD_StringXY(0,1,"State : Reset  ");
     7ba:	46 e4       	ldi	r20, 0x46	; 70
     7bc:	51 e0       	ldi	r21, 0x01	; 1
     7be:	61 e0       	ldi	r22, 0x01	; 1
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	0e 94 33 03 	call	0x666	; 0x666 <LCD_StringXY>
		
	}
}
     7c6:	c0 5b       	subi	r28, 0xB0	; 176
     7c8:	df 4f       	sbci	r29, 0xFF	; 255
     7ca:	0f b6       	in	r0, 0x3f	; 63
     7cc:	f8 94       	cli
     7ce:	de bf       	out	0x3e, r29	; 62
     7d0:	0f be       	out	0x3f, r0	; 63
     7d2:	cd bf       	out	0x3d, r28	; 61
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	08 95       	ret

000007de <sw_Run>:
//Parameters: no
//Returns: nothing
//****************************************************************************************** **
void sw_Run()
{
	if(_secondCounter >=10)//counter is incrementing after every 100 ms
     7de:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <_secondCounter>
     7e2:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <_secondCounter+0x1>
     7e6:	a0 91 bf 01 	lds	r26, 0x01BF	; 0x8001bf <_secondCounter+0x2>
     7ea:	b0 91 c0 01 	lds	r27, 0x01C0	; 0x8001c0 <_secondCounter+0x3>
     7ee:	0a 97       	sbiw	r24, 0x0a	; 10
     7f0:	a1 05       	cpc	r26, r1
     7f2:	b1 05       	cpc	r27, r1
     7f4:	b8 f1       	brcs	.+110    	; 0x864 <__DATA_REGION_LENGTH__+0x64>
	{
		_secondCounter =0;
     7f6:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <_secondCounter>
     7fa:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <_secondCounter+0x1>
     7fe:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <_secondCounter+0x2>
     802:	10 92 c0 01 	sts	0x01C0, r1	; 0x8001c0 <_secondCounter+0x3>
		PORTD |= 0b10000000; // turning on LED after every one second
     806:	8b b1       	in	r24, 0x0b	; 11
     808:	80 68       	ori	r24, 0x80	; 128
     80a:	8b b9       	out	0x0b, r24	; 11
		
		++_seconds;// incrementing counter
     80c:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <_seconds>
     810:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <_seconds+0x1>
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <_seconds+0x1>
     81a:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <_seconds>
		
		if(_seconds >=60)//if time is = 60 then reseting second and increasing minute
     81e:	cc 97       	sbiw	r24, 0x3c	; 60
     820:	68 f0       	brcs	.+26     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
		{
			_seconds=0;
     822:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <_seconds+0x1>
     826:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <_seconds>
			++_minutes;
     82a:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <_minutes>
     82e:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <_minutes+0x1>
     832:	01 96       	adiw	r24, 0x01	; 1
     834:	90 93 ba 01 	sts	0x01BA, r25	; 0x8001ba <_minutes+0x1>
     838:	80 93 b9 01 	sts	0x01B9, r24	; 0x8001b9 <_minutes>
		}
		if(_minutes>=60)
     83c:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <_minutes>
     840:	90 91 ba 01 	lds	r25, 0x01BA	; 0x8001ba <_minutes+0x1>
     844:	cc 97       	sbiw	r24, 0x3c	; 60
     846:	88 f0       	brcs	.+34     	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
		{
			_minutes=0;
     848:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <_minutes+0x1>
     84c:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <_minutes>
			++_hours;
     850:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <_hours>
     854:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <_hours+0x1>
     858:	01 96       	adiw	r24, 0x01	; 1
     85a:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <_hours+0x1>
     85e:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <_hours>
     862:	03 c0       	rjmp	.+6      	; 0x86a <__DATA_REGION_LENGTH__+0x6a>
		}
	}
	else
	{
		PORTD &= ~(0b10000000); // turning off LED
     864:	8b b1       	in	r24, 0x0b	; 11
     866:	8f 77       	andi	r24, 0x7F	; 127
     868:	8b b9       	out	0x0b, r24	; 11
	}
	UpdateLCD();//updating LCD
     86a:	0e 94 6e 03 	call	0x6dc	; 0x6dc <UpdateLCD>
     86e:	08 95       	ret

00000870 <sw_Stop>:
//Parameters: no
//Returns: nothing
//****************************************************************************************** **
void sw_Stop()
{
	UpdateLCD();
     870:	0e 94 6e 03 	call	0x6dc	; 0x6dc <UpdateLCD>
     874:	08 95       	ret

00000876 <sw_Reset>:
//Parameters: no
//Returns: nothing
//****************************************************************************************** **
void sw_Reset()
{
	_seconds=00, _minutes = 00, _hours =00;
     876:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <_seconds+0x1>
     87a:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <_seconds>
     87e:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <_minutes+0x1>
     882:	10 92 b9 01 	sts	0x01B9, r1	; 0x8001b9 <_minutes>
     886:	10 92 b8 01 	sts	0x01B8, r1	; 0x8001b8 <_hours+0x1>
     88a:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <_hours>
	UpdateLCD();
     88e:	0e 94 6e 03 	call	0x6dc	; 0x6dc <UpdateLCD>
     892:	08 95       	ret

00000894 <SWL_Pushed>:
	}
}
// is a specific switch being pushed (T/F)
int SWL_Pushed(SWL_SwitchPos button)
{
	return (!(PINB & (1<<button))) ? 1 : 0;
     894:	23 b1       	in	r18, 0x03	; 3
     896:	30 e0       	ldi	r19, 0x00	; 0
     898:	02 c0       	rjmp	.+4      	; 0x89e <SWL_Pushed+0xa>
     89a:	35 95       	asr	r19
     89c:	27 95       	ror	r18
     89e:	8a 95       	dec	r24
     8a0:	e2 f7       	brpl	.-8      	; 0x89a <SWL_Pushed+0x6>
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	20 fd       	sbrc	r18, 0
     8a6:	80 e0       	ldi	r24, 0x00	; 0
}
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	08 95       	ret

000008ac <Sw_Process>:
// Optional - Using
SwState Sw_Process(SwState* state, SWL_SwitchPos sw)
{
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	ec 01       	movw	r28, r24
     8b2:	86 2f       	mov	r24, r22
	if(SWL_Pushed(sw))
     8b4:	0e 94 4a 04 	call	0x894	; 0x894 <SWL_Pushed>
     8b8:	89 2b       	or	r24, r25
     8ba:	49 f0       	breq	.+18     	; 0x8ce <Sw_Process+0x22>
	{//Switch active
		if(*state == Idle)
     8bc:	88 81       	ld	r24, Y
     8be:	81 11       	cpse	r24, r1
     8c0:	03 c0       	rjmp	.+6      	; 0x8c8 <Sw_Process+0x1c>
		{
			*state = Pressed;
     8c2:	81 e0       	ldi	r24, 0x01	; 1
     8c4:	88 83       	st	Y, r24
     8c6:	0a c0       	rjmp	.+20     	; 0x8dc <Sw_Process+0x30>
		}
		else
		{
			*state = Held;
     8c8:	82 e0       	ldi	r24, 0x02	; 2
     8ca:	88 83       	st	Y, r24
     8cc:	07 c0       	rjmp	.+14     	; 0x8dc <Sw_Process+0x30>
		}
	}
	else
	{//Switch not-active
		if(*state == Held)
     8ce:	88 81       	ld	r24, Y
     8d0:	82 30       	cpi	r24, 0x02	; 2
     8d2:	19 f4       	brne	.+6      	; 0x8da <Sw_Process+0x2e>
		{
			*state = Released;
     8d4:	83 e0       	ldi	r24, 0x03	; 3
     8d6:	88 83       	st	Y, r24
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <Sw_Process+0x30>
		}
		else
		{
			*state = Idle;
     8da:	18 82       	st	Y, r1
		}
	}
	return *state;
}
     8dc:	88 81       	ld	r24, Y
     8de:	df 91       	pop	r29
     8e0:	cf 91       	pop	r28
     8e2:	08 95       	ret

000008e4 <main>:
int main(void)
{
/********************************************************************/
// initializations
/********************************************************************/
	init_portB();//buttons
     8e4:	0e 94 5f 03 	call	0x6be	; 0x6be <init_portB>
	
	Timer_Init(Timer_Prescale_64, _Timer_OC_Offset); // 100ms intervals, ISR
     8e8:	64 ed       	ldi	r22, 0xD4	; 212
     8ea:	70 e3       	ldi	r23, 0x30	; 48
     8ec:	83 e0       	ldi	r24, 0x03	; 3
     8ee:	0e 94 46 03 	call	0x68c	; 0x68c <Timer_Init>
	
	// jump up to 8MHz, as 2MHz is a little slow
	// 11.11.2 ATmega328PB Full
	CLKPR = 0b10000000; // enable changes
     8f2:	e1 e6       	ldi	r30, 0x61	; 97
     8f4:	f0 e0       	ldi	r31, 0x00	; 0
     8f6:	80 e8       	ldi	r24, 0x80	; 128
     8f8:	80 83       	st	Z, r24
	CLKPR = 0b00000001; // set to div by 2 (16 / 2 = 8MHz)
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	80 83       	st	Z, r24
	
	
	DDRD |= 1 << PORTD7; // make portd pin 7 an output (PD7)
     8fe:	8a b1       	in	r24, 0x0a	; 10
     900:	80 68       	ori	r24, 0x80	; 128
     902:	8a b9       	out	0x0a, r24	; 10
	
	I2C_Init(F_CPU,I2CBus100);
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	60 e0       	ldi	r22, 0x00	; 0
     908:	72 e1       	ldi	r23, 0x12	; 18
     90a:	8a e7       	ldi	r24, 0x7A	; 122
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	0e 94 53 00 	call	0xa6	; 0xa6 <I2C_Init>
	sleep_enable();
     912:	83 b7       	in	r24, 0x33	; 51
     914:	81 60       	ori	r24, 0x01	; 1
     916:	83 bf       	out	0x33, r24	; 51
	
	LCD_Init(F_CPU);
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	72 e1       	ldi	r23, 0x12	; 18
     91c:	8a e7       	ldi	r24, 0x7A	; 122
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 a9 02 	call	0x552	; 0x552 <LCD_Init>
	sei();
     924:	78 94       	sei
	
	
	LCD_Clear();
     926:	0e 94 42 03 	call	0x684	; 0x684 <LCD_Clear>
	(void)sprintf(rxTime,"Time : %02d:%02d:%02d",_hours,_minutes,_seconds);
     92a:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <_seconds+0x1>
     92e:	8f 93       	push	r24
     930:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <_seconds>
     934:	8f 93       	push	r24
     936:	80 91 ba 01 	lds	r24, 0x01BA	; 0x8001ba <_minutes+0x1>
     93a:	8f 93       	push	r24
     93c:	80 91 b9 01 	lds	r24, 0x01B9	; 0x8001b9 <_minutes>
     940:	8f 93       	push	r24
     942:	80 91 b8 01 	lds	r24, 0x01B8	; 0x8001b8 <_hours+0x1>
     946:	8f 93       	push	r24
     948:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <_hours>
     94c:	8f 93       	push	r24
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	91 e0       	ldi	r25, 0x01	; 1
     952:	9f 93       	push	r25
     954:	8f 93       	push	r24
     956:	86 e6       	ldi	r24, 0x66	; 102
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	9f 93       	push	r25
     95c:	8f 93       	push	r24
     95e:	0e 94 8a 07 	call	0xf14	; 0xf14 <sprintf>
	LCD_StringXY(0,0,rxTime);
     962:	46 e6       	ldi	r20, 0x66	; 102
     964:	51 e0       	ldi	r21, 0x01	; 1
     966:	60 e0       	ldi	r22, 0x00	; 0
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	0e 94 33 03 	call	0x666	; 0x666 <LCD_StringXY>
	LCD_StringXY(0,1,"State : Idle");
     96e:	46 e5       	ldi	r20, 0x56	; 86
     970:	51 e0       	ldi	r21, 0x01	; 1
     972:	61 e0       	ldi	r22, 0x01	; 1
     974:	80 e0       	ldi	r24, 0x00	; 0
     976:	0e 94 33 03 	call	0x666	; 0x666 <LCD_StringXY>
     97a:	8d b7       	in	r24, 0x3d	; 61
     97c:	9e b7       	in	r25, 0x3e	; 62
     97e:	0a 96       	adiw	r24, 0x0a	; 10
     980:	0f b6       	in	r0, 0x3f	; 63
     982:	f8 94       	cli
     984:	9e bf       	out	0x3e, r25	; 62
     986:	0f be       	out	0x3f, r0	; 63
     988:	8d bf       	out	0x3d, r24	; 61
/********************************************************************/
// main program loop
/********************************************************************/
	while(1)
	{
		sleep_cpu();//sleeping CPU
     98a:	88 95       	sleep
		
		if(_state == IDLE && (Sw_Process(&_leftButton, SWL_LEFT) == Pressed))// if state is idle then we will only accept button to start only 
     98c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <_state>
     990:	81 11       	cpse	r24, r1
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__stack+0xa7>
     994:	61 e0       	ldi	r22, 0x01	; 1
     996:	85 e6       	ldi	r24, 0x65	; 101
     998:	91 e0       	ldi	r25, 0x01	; 1
     99a:	0e 94 56 04 	call	0x8ac	; 0x8ac <Sw_Process>
     99e:	81 30       	cpi	r24, 0x01	; 1
     9a0:	11 f4       	brne	.+4      	; 0x9a6 <__stack+0xa7>
		{
			_state = RUN;
     9a2:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <_state>
		}
		
		//Switch case for all states
		switch (_state)
     9a6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <_state>
     9aa:	82 30       	cpi	r24, 0x02	; 2
     9ac:	89 f0       	breq	.+34     	; 0x9d0 <__stack+0xd1>
     9ae:	83 30       	cpi	r24, 0x03	; 3
     9b0:	29 f1       	breq	.+74     	; 0x9fc <__stack+0xfd>
     9b2:	81 30       	cpi	r24, 0x01	; 1
     9b4:	51 f7       	brne	.-44     	; 0x98a <__stack+0x8b>
		{
			case RUN:
				sw_Run(); // running the stopwatch
     9b6:	0e 94 ef 03 	call	0x7de	; 0x7de <sw_Run>
				if(Sw_Process(&_rightButton, SWL_RIGHT) == Pressed)//we could only stop , no any other button response required
     9ba:	62 e0       	ldi	r22, 0x02	; 2
     9bc:	84 e6       	ldi	r24, 0x64	; 100
     9be:	91 e0       	ldi	r25, 0x01	; 1
     9c0:	0e 94 56 04 	call	0x8ac	; 0x8ac <Sw_Process>
     9c4:	81 30       	cpi	r24, 0x01	; 1
     9c6:	09 f7       	brne	.-62     	; 0x98a <__stack+0x8b>
				{
					_state = STOP;
     9c8:	82 e0       	ldi	r24, 0x02	; 2
     9ca:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <_state>
     9ce:	dd cf       	rjmp	.-70     	; 0x98a <__stack+0x8b>
				}
				break;
			
			case STOP:
				if(Sw_Process(&_leftButton, SWL_LEFT) == Pressed) // if user want to start again
     9d0:	61 e0       	ldi	r22, 0x01	; 1
     9d2:	85 e6       	ldi	r24, 0x65	; 101
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	0e 94 56 04 	call	0x8ac	; 0x8ac <Sw_Process>
     9da:	81 30       	cpi	r24, 0x01	; 1
     9dc:	11 f4       	brne	.+4      	; 0x9e2 <__stack+0xe3>
				{
					_state = RUN;
     9de:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <_state>
				}
				if(Sw_Process(&_rightButton, SWL_RIGHT) == Pressed) // if user want to reset
     9e2:	62 e0       	ldi	r22, 0x02	; 2
     9e4:	84 e6       	ldi	r24, 0x64	; 100
     9e6:	91 e0       	ldi	r25, 0x01	; 1
     9e8:	0e 94 56 04 	call	0x8ac	; 0x8ac <Sw_Process>
     9ec:	81 30       	cpi	r24, 0x01	; 1
     9ee:	19 f4       	brne	.+6      	; 0x9f6 <__stack+0xf7>
				{
					_state = RESET;
     9f0:	83 e0       	ldi	r24, 0x03	; 3
     9f2:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <_state>
				}
				sw_Stop();
     9f6:	0e 94 38 04 	call	0x870	; 0x870 <sw_Stop>
				break;
     9fa:	c7 cf       	rjmp	.-114    	; 0x98a <__stack+0x8b>
			
			case RESET:
				sw_Reset();
     9fc:	0e 94 3b 04 	call	0x876	; 0x876 <sw_Reset>
				if(Sw_Process(&_leftButton, SWL_LEFT) == Pressed)// after reset user can only start the SW
     a00:	61 e0       	ldi	r22, 0x01	; 1
     a02:	85 e6       	ldi	r24, 0x65	; 101
     a04:	91 e0       	ldi	r25, 0x01	; 1
     a06:	0e 94 56 04 	call	0x8ac	; 0x8ac <Sw_Process>
     a0a:	81 30       	cpi	r24, 0x01	; 1
     a0c:	09 f0       	breq	.+2      	; 0xa10 <__stack+0x111>
     a0e:	bd cf       	rjmp	.-134    	; 0x98a <__stack+0x8b>
				{
					_state = RUN;
     a10:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <_state>
     a14:	ba cf       	rjmp	.-140    	; 0x98a <__stack+0x8b>

00000a16 <__vector_11>:
	}
	return *state;
}
// output compare A interrupt
ISR(TIMER1_COMPA_vect)
{
     a16:	1f 92       	push	r1
     a18:	0f 92       	push	r0
     a1a:	0f b6       	in	r0, 0x3f	; 63
     a1c:	0f 92       	push	r0
     a1e:	11 24       	eor	r1, r1
     a20:	8f 93       	push	r24
     a22:	9f 93       	push	r25
     a24:	af 93       	push	r26
     a26:	bf 93       	push	r27
     a28:	ef 93       	push	r30
     a2a:	ff 93       	push	r31
	// rearm the output compare operation
	OCR1A += _Timer_OC_Offset; // 100ms intervals @ Prescale 64
     a2c:	e8 e8       	ldi	r30, 0x88	; 136
     a2e:	f0 e0       	ldi	r31, 0x00	; 0
     a30:	80 81       	ld	r24, Z
     a32:	91 81       	ldd	r25, Z+1	; 0x01
     a34:	8c 52       	subi	r24, 0x2C	; 44
     a36:	9f 4c       	sbci	r25, 0xCF	; 207
     a38:	91 83       	std	Z+1, r25	; 0x01
     a3a:	80 83       	st	Z, r24
	
	// count 100ms ticks!
	++_Update;
     a3c:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <_Update>
     a40:	90 91 c2 01 	lds	r25, 0x01C2	; 0x8001c2 <_Update+0x1>
     a44:	a0 91 c3 01 	lds	r26, 0x01C3	; 0x8001c3 <_Update+0x2>
     a48:	b0 91 c4 01 	lds	r27, 0x01C4	; 0x8001c4 <_Update+0x3>
     a4c:	01 96       	adiw	r24, 0x01	; 1
     a4e:	a1 1d       	adc	r26, r1
     a50:	b1 1d       	adc	r27, r1
     a52:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <_Update>
     a56:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <_Update+0x1>
     a5a:	a0 93 c3 01 	sts	0x01C3, r26	; 0x8001c3 <_Update+0x2>
     a5e:	b0 93 c4 01 	sts	0x01C4, r27	; 0x8001c4 <_Update+0x3>
	
	if(_state == RUN)//for accuracy we will only increment seconds if state is run
     a62:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <_state>
     a66:	81 30       	cpi	r24, 0x01	; 1
     a68:	99 f4       	brne	.+38     	; 0xa90 <__vector_11+0x7a>
		++_secondCounter;
     a6a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <_secondCounter>
     a6e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <_secondCounter+0x1>
     a72:	a0 91 bf 01 	lds	r26, 0x01BF	; 0x8001bf <_secondCounter+0x2>
     a76:	b0 91 c0 01 	lds	r27, 0x01C0	; 0x8001c0 <_secondCounter+0x3>
     a7a:	01 96       	adiw	r24, 0x01	; 1
     a7c:	a1 1d       	adc	r26, r1
     a7e:	b1 1d       	adc	r27, r1
     a80:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <_secondCounter>
     a84:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <_secondCounter+0x1>
     a88:	a0 93 bf 01 	sts	0x01BF, r26	; 0x8001bf <_secondCounter+0x2>
     a8c:	b0 93 c0 01 	sts	0x01C0, r27	; 0x8001c0 <_secondCounter+0x3>
}
     a90:	ff 91       	pop	r31
     a92:	ef 91       	pop	r30
     a94:	bf 91       	pop	r27
     a96:	af 91       	pop	r26
     a98:	9f 91       	pop	r25
     a9a:	8f 91       	pop	r24
     a9c:	0f 90       	pop	r0
     a9e:	0f be       	out	0x3f, r0	; 63
     aa0:	0f 90       	pop	r0
     aa2:	1f 90       	pop	r1
     aa4:	18 95       	reti

00000aa6 <__subsf3>:
     aa6:	50 58       	subi	r21, 0x80	; 128

00000aa8 <__addsf3>:
     aa8:	bb 27       	eor	r27, r27
     aaa:	aa 27       	eor	r26, r26
     aac:	0e 94 6b 05 	call	0xad6	; 0xad6 <__addsf3x>
     ab0:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <__fp_round>
     ab4:	0e 94 d0 06 	call	0xda0	; 0xda0 <__fp_pscA>
     ab8:	38 f0       	brcs	.+14     	; 0xac8 <__addsf3+0x20>
     aba:	0e 94 d7 06 	call	0xdae	; 0xdae <__fp_pscB>
     abe:	20 f0       	brcs	.+8      	; 0xac8 <__addsf3+0x20>
     ac0:	39 f4       	brne	.+14     	; 0xad0 <__addsf3+0x28>
     ac2:	9f 3f       	cpi	r25, 0xFF	; 255
     ac4:	19 f4       	brne	.+6      	; 0xacc <__addsf3+0x24>
     ac6:	26 f4       	brtc	.+8      	; 0xad0 <__addsf3+0x28>
     ac8:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <__fp_nan>
     acc:	0e f4       	brtc	.+2      	; 0xad0 <__addsf3+0x28>
     ace:	e0 95       	com	r30
     ad0:	e7 fb       	bst	r30, 7
     ad2:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <__fp_inf>

00000ad6 <__addsf3x>:
     ad6:	e9 2f       	mov	r30, r25
     ad8:	0e 94 ef 06 	call	0xdde	; 0xdde <__fp_split3>
     adc:	58 f3       	brcs	.-42     	; 0xab4 <__addsf3+0xc>
     ade:	ba 17       	cp	r27, r26
     ae0:	62 07       	cpc	r22, r18
     ae2:	73 07       	cpc	r23, r19
     ae4:	84 07       	cpc	r24, r20
     ae6:	95 07       	cpc	r25, r21
     ae8:	20 f0       	brcs	.+8      	; 0xaf2 <__addsf3x+0x1c>
     aea:	79 f4       	brne	.+30     	; 0xb0a <__addsf3x+0x34>
     aec:	a6 f5       	brtc	.+104    	; 0xb56 <__addsf3x+0x80>
     aee:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__fp_zero>
     af2:	0e f4       	brtc	.+2      	; 0xaf6 <__addsf3x+0x20>
     af4:	e0 95       	com	r30
     af6:	0b 2e       	mov	r0, r27
     af8:	ba 2f       	mov	r27, r26
     afa:	a0 2d       	mov	r26, r0
     afc:	0b 01       	movw	r0, r22
     afe:	b9 01       	movw	r22, r18
     b00:	90 01       	movw	r18, r0
     b02:	0c 01       	movw	r0, r24
     b04:	ca 01       	movw	r24, r20
     b06:	a0 01       	movw	r20, r0
     b08:	11 24       	eor	r1, r1
     b0a:	ff 27       	eor	r31, r31
     b0c:	59 1b       	sub	r21, r25
     b0e:	99 f0       	breq	.+38     	; 0xb36 <__addsf3x+0x60>
     b10:	59 3f       	cpi	r21, 0xF9	; 249
     b12:	50 f4       	brcc	.+20     	; 0xb28 <__addsf3x+0x52>
     b14:	50 3e       	cpi	r21, 0xE0	; 224
     b16:	68 f1       	brcs	.+90     	; 0xb72 <__addsf3x+0x9c>
     b18:	1a 16       	cp	r1, r26
     b1a:	f0 40       	sbci	r31, 0x00	; 0
     b1c:	a2 2f       	mov	r26, r18
     b1e:	23 2f       	mov	r18, r19
     b20:	34 2f       	mov	r19, r20
     b22:	44 27       	eor	r20, r20
     b24:	58 5f       	subi	r21, 0xF8	; 248
     b26:	f3 cf       	rjmp	.-26     	; 0xb0e <__addsf3x+0x38>
     b28:	46 95       	lsr	r20
     b2a:	37 95       	ror	r19
     b2c:	27 95       	ror	r18
     b2e:	a7 95       	ror	r26
     b30:	f0 40       	sbci	r31, 0x00	; 0
     b32:	53 95       	inc	r21
     b34:	c9 f7       	brne	.-14     	; 0xb28 <__addsf3x+0x52>
     b36:	7e f4       	brtc	.+30     	; 0xb56 <__addsf3x+0x80>
     b38:	1f 16       	cp	r1, r31
     b3a:	ba 0b       	sbc	r27, r26
     b3c:	62 0b       	sbc	r22, r18
     b3e:	73 0b       	sbc	r23, r19
     b40:	84 0b       	sbc	r24, r20
     b42:	ba f0       	brmi	.+46     	; 0xb72 <__addsf3x+0x9c>
     b44:	91 50       	subi	r25, 0x01	; 1
     b46:	a1 f0       	breq	.+40     	; 0xb70 <__addsf3x+0x9a>
     b48:	ff 0f       	add	r31, r31
     b4a:	bb 1f       	adc	r27, r27
     b4c:	66 1f       	adc	r22, r22
     b4e:	77 1f       	adc	r23, r23
     b50:	88 1f       	adc	r24, r24
     b52:	c2 f7       	brpl	.-16     	; 0xb44 <__addsf3x+0x6e>
     b54:	0e c0       	rjmp	.+28     	; 0xb72 <__addsf3x+0x9c>
     b56:	ba 0f       	add	r27, r26
     b58:	62 1f       	adc	r22, r18
     b5a:	73 1f       	adc	r23, r19
     b5c:	84 1f       	adc	r24, r20
     b5e:	48 f4       	brcc	.+18     	; 0xb72 <__addsf3x+0x9c>
     b60:	87 95       	ror	r24
     b62:	77 95       	ror	r23
     b64:	67 95       	ror	r22
     b66:	b7 95       	ror	r27
     b68:	f7 95       	ror	r31
     b6a:	9e 3f       	cpi	r25, 0xFE	; 254
     b6c:	08 f0       	brcs	.+2      	; 0xb70 <__addsf3x+0x9a>
     b6e:	b0 cf       	rjmp	.-160    	; 0xad0 <__addsf3+0x28>
     b70:	93 95       	inc	r25
     b72:	88 0f       	add	r24, r24
     b74:	08 f0       	brcs	.+2      	; 0xb78 <__addsf3x+0xa2>
     b76:	99 27       	eor	r25, r25
     b78:	ee 0f       	add	r30, r30
     b7a:	97 95       	ror	r25
     b7c:	87 95       	ror	r24
     b7e:	08 95       	ret

00000b80 <__cmpsf2>:
     b80:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fp_cmp>
     b84:	08 f4       	brcc	.+2      	; 0xb88 <__cmpsf2+0x8>
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	08 95       	ret

00000b8a <__divsf3>:
     b8a:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <__divsf3x>
     b8e:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <__fp_round>
     b92:	0e 94 d7 06 	call	0xdae	; 0xdae <__fp_pscB>
     b96:	58 f0       	brcs	.+22     	; 0xbae <__divsf3+0x24>
     b98:	0e 94 d0 06 	call	0xda0	; 0xda0 <__fp_pscA>
     b9c:	40 f0       	brcs	.+16     	; 0xbae <__divsf3+0x24>
     b9e:	29 f4       	brne	.+10     	; 0xbaa <__divsf3+0x20>
     ba0:	5f 3f       	cpi	r21, 0xFF	; 255
     ba2:	29 f0       	breq	.+10     	; 0xbae <__divsf3+0x24>
     ba4:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <__fp_inf>
     ba8:	51 11       	cpse	r21, r1
     baa:	0c 94 12 07 	jmp	0xe24	; 0xe24 <__fp_szero>
     bae:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <__fp_nan>

00000bb2 <__divsf3x>:
     bb2:	0e 94 ef 06 	call	0xdde	; 0xdde <__fp_split3>
     bb6:	68 f3       	brcs	.-38     	; 0xb92 <__divsf3+0x8>

00000bb8 <__divsf3_pse>:
     bb8:	99 23       	and	r25, r25
     bba:	b1 f3       	breq	.-20     	; 0xba8 <__divsf3+0x1e>
     bbc:	55 23       	and	r21, r21
     bbe:	91 f3       	breq	.-28     	; 0xba4 <__divsf3+0x1a>
     bc0:	95 1b       	sub	r25, r21
     bc2:	55 0b       	sbc	r21, r21
     bc4:	bb 27       	eor	r27, r27
     bc6:	aa 27       	eor	r26, r26
     bc8:	62 17       	cp	r22, r18
     bca:	73 07       	cpc	r23, r19
     bcc:	84 07       	cpc	r24, r20
     bce:	38 f0       	brcs	.+14     	; 0xbde <__divsf3_pse+0x26>
     bd0:	9f 5f       	subi	r25, 0xFF	; 255
     bd2:	5f 4f       	sbci	r21, 0xFF	; 255
     bd4:	22 0f       	add	r18, r18
     bd6:	33 1f       	adc	r19, r19
     bd8:	44 1f       	adc	r20, r20
     bda:	aa 1f       	adc	r26, r26
     bdc:	a9 f3       	breq	.-22     	; 0xbc8 <__divsf3_pse+0x10>
     bde:	35 d0       	rcall	.+106    	; 0xc4a <__divsf3_pse+0x92>
     be0:	0e 2e       	mov	r0, r30
     be2:	3a f0       	brmi	.+14     	; 0xbf2 <__divsf3_pse+0x3a>
     be4:	e0 e8       	ldi	r30, 0x80	; 128
     be6:	32 d0       	rcall	.+100    	; 0xc4c <__divsf3_pse+0x94>
     be8:	91 50       	subi	r25, 0x01	; 1
     bea:	50 40       	sbci	r21, 0x00	; 0
     bec:	e6 95       	lsr	r30
     bee:	00 1c       	adc	r0, r0
     bf0:	ca f7       	brpl	.-14     	; 0xbe4 <__divsf3_pse+0x2c>
     bf2:	2b d0       	rcall	.+86     	; 0xc4a <__divsf3_pse+0x92>
     bf4:	fe 2f       	mov	r31, r30
     bf6:	29 d0       	rcall	.+82     	; 0xc4a <__divsf3_pse+0x92>
     bf8:	66 0f       	add	r22, r22
     bfa:	77 1f       	adc	r23, r23
     bfc:	88 1f       	adc	r24, r24
     bfe:	bb 1f       	adc	r27, r27
     c00:	26 17       	cp	r18, r22
     c02:	37 07       	cpc	r19, r23
     c04:	48 07       	cpc	r20, r24
     c06:	ab 07       	cpc	r26, r27
     c08:	b0 e8       	ldi	r27, 0x80	; 128
     c0a:	09 f0       	breq	.+2      	; 0xc0e <__divsf3_pse+0x56>
     c0c:	bb 0b       	sbc	r27, r27
     c0e:	80 2d       	mov	r24, r0
     c10:	bf 01       	movw	r22, r30
     c12:	ff 27       	eor	r31, r31
     c14:	93 58       	subi	r25, 0x83	; 131
     c16:	5f 4f       	sbci	r21, 0xFF	; 255
     c18:	3a f0       	brmi	.+14     	; 0xc28 <__divsf3_pse+0x70>
     c1a:	9e 3f       	cpi	r25, 0xFE	; 254
     c1c:	51 05       	cpc	r21, r1
     c1e:	78 f0       	brcs	.+30     	; 0xc3e <__divsf3_pse+0x86>
     c20:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <__fp_inf>
     c24:	0c 94 12 07 	jmp	0xe24	; 0xe24 <__fp_szero>
     c28:	5f 3f       	cpi	r21, 0xFF	; 255
     c2a:	e4 f3       	brlt	.-8      	; 0xc24 <__divsf3_pse+0x6c>
     c2c:	98 3e       	cpi	r25, 0xE8	; 232
     c2e:	d4 f3       	brlt	.-12     	; 0xc24 <__divsf3_pse+0x6c>
     c30:	86 95       	lsr	r24
     c32:	77 95       	ror	r23
     c34:	67 95       	ror	r22
     c36:	b7 95       	ror	r27
     c38:	f7 95       	ror	r31
     c3a:	9f 5f       	subi	r25, 0xFF	; 255
     c3c:	c9 f7       	brne	.-14     	; 0xc30 <__divsf3_pse+0x78>
     c3e:	88 0f       	add	r24, r24
     c40:	91 1d       	adc	r25, r1
     c42:	96 95       	lsr	r25
     c44:	87 95       	ror	r24
     c46:	97 f9       	bld	r25, 7
     c48:	08 95       	ret
     c4a:	e1 e0       	ldi	r30, 0x01	; 1
     c4c:	66 0f       	add	r22, r22
     c4e:	77 1f       	adc	r23, r23
     c50:	88 1f       	adc	r24, r24
     c52:	bb 1f       	adc	r27, r27
     c54:	62 17       	cp	r22, r18
     c56:	73 07       	cpc	r23, r19
     c58:	84 07       	cpc	r24, r20
     c5a:	ba 07       	cpc	r27, r26
     c5c:	20 f0       	brcs	.+8      	; 0xc66 <__divsf3_pse+0xae>
     c5e:	62 1b       	sub	r22, r18
     c60:	73 0b       	sbc	r23, r19
     c62:	84 0b       	sbc	r24, r20
     c64:	ba 0b       	sbc	r27, r26
     c66:	ee 1f       	adc	r30, r30
     c68:	88 f7       	brcc	.-30     	; 0xc4c <__divsf3_pse+0x94>
     c6a:	e0 95       	com	r30
     c6c:	08 95       	ret

00000c6e <__fixunssfsi>:
     c6e:	0e 94 f7 06 	call	0xdee	; 0xdee <__fp_splitA>
     c72:	88 f0       	brcs	.+34     	; 0xc96 <__fixunssfsi+0x28>
     c74:	9f 57       	subi	r25, 0x7F	; 127
     c76:	98 f0       	brcs	.+38     	; 0xc9e <__fixunssfsi+0x30>
     c78:	b9 2f       	mov	r27, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	b7 51       	subi	r27, 0x17	; 23
     c7e:	b0 f0       	brcs	.+44     	; 0xcac <__fixunssfsi+0x3e>
     c80:	e1 f0       	breq	.+56     	; 0xcba <__fixunssfsi+0x4c>
     c82:	66 0f       	add	r22, r22
     c84:	77 1f       	adc	r23, r23
     c86:	88 1f       	adc	r24, r24
     c88:	99 1f       	adc	r25, r25
     c8a:	1a f0       	brmi	.+6      	; 0xc92 <__fixunssfsi+0x24>
     c8c:	ba 95       	dec	r27
     c8e:	c9 f7       	brne	.-14     	; 0xc82 <__fixunssfsi+0x14>
     c90:	14 c0       	rjmp	.+40     	; 0xcba <__fixunssfsi+0x4c>
     c92:	b1 30       	cpi	r27, 0x01	; 1
     c94:	91 f0       	breq	.+36     	; 0xcba <__fixunssfsi+0x4c>
     c96:	0e 94 11 07 	call	0xe22	; 0xe22 <__fp_zero>
     c9a:	b1 e0       	ldi	r27, 0x01	; 1
     c9c:	08 95       	ret
     c9e:	0c 94 11 07 	jmp	0xe22	; 0xe22 <__fp_zero>
     ca2:	67 2f       	mov	r22, r23
     ca4:	78 2f       	mov	r23, r24
     ca6:	88 27       	eor	r24, r24
     ca8:	b8 5f       	subi	r27, 0xF8	; 248
     caa:	39 f0       	breq	.+14     	; 0xcba <__fixunssfsi+0x4c>
     cac:	b9 3f       	cpi	r27, 0xF9	; 249
     cae:	cc f3       	brlt	.-14     	; 0xca2 <__fixunssfsi+0x34>
     cb0:	86 95       	lsr	r24
     cb2:	77 95       	ror	r23
     cb4:	67 95       	ror	r22
     cb6:	b3 95       	inc	r27
     cb8:	d9 f7       	brne	.-10     	; 0xcb0 <__fixunssfsi+0x42>
     cba:	3e f4       	brtc	.+14     	; 0xcca <__fixunssfsi+0x5c>
     cbc:	90 95       	com	r25
     cbe:	80 95       	com	r24
     cc0:	70 95       	com	r23
     cc2:	61 95       	neg	r22
     cc4:	7f 4f       	sbci	r23, 0xFF	; 255
     cc6:	8f 4f       	sbci	r24, 0xFF	; 255
     cc8:	9f 4f       	sbci	r25, 0xFF	; 255
     cca:	08 95       	ret

00000ccc <__floatunsisf>:
     ccc:	e8 94       	clt
     cce:	09 c0       	rjmp	.+18     	; 0xce2 <__floatsisf+0x12>

00000cd0 <__floatsisf>:
     cd0:	97 fb       	bst	r25, 7
     cd2:	3e f4       	brtc	.+14     	; 0xce2 <__floatsisf+0x12>
     cd4:	90 95       	com	r25
     cd6:	80 95       	com	r24
     cd8:	70 95       	com	r23
     cda:	61 95       	neg	r22
     cdc:	7f 4f       	sbci	r23, 0xFF	; 255
     cde:	8f 4f       	sbci	r24, 0xFF	; 255
     ce0:	9f 4f       	sbci	r25, 0xFF	; 255
     ce2:	99 23       	and	r25, r25
     ce4:	a9 f0       	breq	.+42     	; 0xd10 <__floatsisf+0x40>
     ce6:	f9 2f       	mov	r31, r25
     ce8:	96 e9       	ldi	r25, 0x96	; 150
     cea:	bb 27       	eor	r27, r27
     cec:	93 95       	inc	r25
     cee:	f6 95       	lsr	r31
     cf0:	87 95       	ror	r24
     cf2:	77 95       	ror	r23
     cf4:	67 95       	ror	r22
     cf6:	b7 95       	ror	r27
     cf8:	f1 11       	cpse	r31, r1
     cfa:	f8 cf       	rjmp	.-16     	; 0xcec <__floatsisf+0x1c>
     cfc:	fa f4       	brpl	.+62     	; 0xd3c <__floatsisf+0x6c>
     cfe:	bb 0f       	add	r27, r27
     d00:	11 f4       	brne	.+4      	; 0xd06 <__floatsisf+0x36>
     d02:	60 ff       	sbrs	r22, 0
     d04:	1b c0       	rjmp	.+54     	; 0xd3c <__floatsisf+0x6c>
     d06:	6f 5f       	subi	r22, 0xFF	; 255
     d08:	7f 4f       	sbci	r23, 0xFF	; 255
     d0a:	8f 4f       	sbci	r24, 0xFF	; 255
     d0c:	9f 4f       	sbci	r25, 0xFF	; 255
     d0e:	16 c0       	rjmp	.+44     	; 0xd3c <__floatsisf+0x6c>
     d10:	88 23       	and	r24, r24
     d12:	11 f0       	breq	.+4      	; 0xd18 <__floatsisf+0x48>
     d14:	96 e9       	ldi	r25, 0x96	; 150
     d16:	11 c0       	rjmp	.+34     	; 0xd3a <__floatsisf+0x6a>
     d18:	77 23       	and	r23, r23
     d1a:	21 f0       	breq	.+8      	; 0xd24 <__floatsisf+0x54>
     d1c:	9e e8       	ldi	r25, 0x8E	; 142
     d1e:	87 2f       	mov	r24, r23
     d20:	76 2f       	mov	r23, r22
     d22:	05 c0       	rjmp	.+10     	; 0xd2e <__floatsisf+0x5e>
     d24:	66 23       	and	r22, r22
     d26:	71 f0       	breq	.+28     	; 0xd44 <__floatsisf+0x74>
     d28:	96 e8       	ldi	r25, 0x86	; 134
     d2a:	86 2f       	mov	r24, r22
     d2c:	70 e0       	ldi	r23, 0x00	; 0
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	2a f0       	brmi	.+10     	; 0xd3c <__floatsisf+0x6c>
     d32:	9a 95       	dec	r25
     d34:	66 0f       	add	r22, r22
     d36:	77 1f       	adc	r23, r23
     d38:	88 1f       	adc	r24, r24
     d3a:	da f7       	brpl	.-10     	; 0xd32 <__floatsisf+0x62>
     d3c:	88 0f       	add	r24, r24
     d3e:	96 95       	lsr	r25
     d40:	87 95       	ror	r24
     d42:	97 f9       	bld	r25, 7
     d44:	08 95       	ret

00000d46 <__fp_cmp>:
     d46:	99 0f       	add	r25, r25
     d48:	00 08       	sbc	r0, r0
     d4a:	55 0f       	add	r21, r21
     d4c:	aa 0b       	sbc	r26, r26
     d4e:	e0 e8       	ldi	r30, 0x80	; 128
     d50:	fe ef       	ldi	r31, 0xFE	; 254
     d52:	16 16       	cp	r1, r22
     d54:	17 06       	cpc	r1, r23
     d56:	e8 07       	cpc	r30, r24
     d58:	f9 07       	cpc	r31, r25
     d5a:	c0 f0       	brcs	.+48     	; 0xd8c <__fp_cmp+0x46>
     d5c:	12 16       	cp	r1, r18
     d5e:	13 06       	cpc	r1, r19
     d60:	e4 07       	cpc	r30, r20
     d62:	f5 07       	cpc	r31, r21
     d64:	98 f0       	brcs	.+38     	; 0xd8c <__fp_cmp+0x46>
     d66:	62 1b       	sub	r22, r18
     d68:	73 0b       	sbc	r23, r19
     d6a:	84 0b       	sbc	r24, r20
     d6c:	95 0b       	sbc	r25, r21
     d6e:	39 f4       	brne	.+14     	; 0xd7e <__fp_cmp+0x38>
     d70:	0a 26       	eor	r0, r26
     d72:	61 f0       	breq	.+24     	; 0xd8c <__fp_cmp+0x46>
     d74:	23 2b       	or	r18, r19
     d76:	24 2b       	or	r18, r20
     d78:	25 2b       	or	r18, r21
     d7a:	21 f4       	brne	.+8      	; 0xd84 <__fp_cmp+0x3e>
     d7c:	08 95       	ret
     d7e:	0a 26       	eor	r0, r26
     d80:	09 f4       	brne	.+2      	; 0xd84 <__fp_cmp+0x3e>
     d82:	a1 40       	sbci	r26, 0x01	; 1
     d84:	a6 95       	lsr	r26
     d86:	8f ef       	ldi	r24, 0xFF	; 255
     d88:	81 1d       	adc	r24, r1
     d8a:	81 1d       	adc	r24, r1
     d8c:	08 95       	ret

00000d8e <__fp_inf>:
     d8e:	97 f9       	bld	r25, 7
     d90:	9f 67       	ori	r25, 0x7F	; 127
     d92:	80 e8       	ldi	r24, 0x80	; 128
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	60 e0       	ldi	r22, 0x00	; 0
     d98:	08 95       	ret

00000d9a <__fp_nan>:
     d9a:	9f ef       	ldi	r25, 0xFF	; 255
     d9c:	80 ec       	ldi	r24, 0xC0	; 192
     d9e:	08 95       	ret

00000da0 <__fp_pscA>:
     da0:	00 24       	eor	r0, r0
     da2:	0a 94       	dec	r0
     da4:	16 16       	cp	r1, r22
     da6:	17 06       	cpc	r1, r23
     da8:	18 06       	cpc	r1, r24
     daa:	09 06       	cpc	r0, r25
     dac:	08 95       	ret

00000dae <__fp_pscB>:
     dae:	00 24       	eor	r0, r0
     db0:	0a 94       	dec	r0
     db2:	12 16       	cp	r1, r18
     db4:	13 06       	cpc	r1, r19
     db6:	14 06       	cpc	r1, r20
     db8:	05 06       	cpc	r0, r21
     dba:	08 95       	ret

00000dbc <__fp_round>:
     dbc:	09 2e       	mov	r0, r25
     dbe:	03 94       	inc	r0
     dc0:	00 0c       	add	r0, r0
     dc2:	11 f4       	brne	.+4      	; 0xdc8 <__fp_round+0xc>
     dc4:	88 23       	and	r24, r24
     dc6:	52 f0       	brmi	.+20     	; 0xddc <__fp_round+0x20>
     dc8:	bb 0f       	add	r27, r27
     dca:	40 f4       	brcc	.+16     	; 0xddc <__fp_round+0x20>
     dcc:	bf 2b       	or	r27, r31
     dce:	11 f4       	brne	.+4      	; 0xdd4 <__fp_round+0x18>
     dd0:	60 ff       	sbrs	r22, 0
     dd2:	04 c0       	rjmp	.+8      	; 0xddc <__fp_round+0x20>
     dd4:	6f 5f       	subi	r22, 0xFF	; 255
     dd6:	7f 4f       	sbci	r23, 0xFF	; 255
     dd8:	8f 4f       	sbci	r24, 0xFF	; 255
     dda:	9f 4f       	sbci	r25, 0xFF	; 255
     ddc:	08 95       	ret

00000dde <__fp_split3>:
     dde:	57 fd       	sbrc	r21, 7
     de0:	90 58       	subi	r25, 0x80	; 128
     de2:	44 0f       	add	r20, r20
     de4:	55 1f       	adc	r21, r21
     de6:	59 f0       	breq	.+22     	; 0xdfe <__fp_splitA+0x10>
     de8:	5f 3f       	cpi	r21, 0xFF	; 255
     dea:	71 f0       	breq	.+28     	; 0xe08 <__fp_splitA+0x1a>
     dec:	47 95       	ror	r20

00000dee <__fp_splitA>:
     dee:	88 0f       	add	r24, r24
     df0:	97 fb       	bst	r25, 7
     df2:	99 1f       	adc	r25, r25
     df4:	61 f0       	breq	.+24     	; 0xe0e <__fp_splitA+0x20>
     df6:	9f 3f       	cpi	r25, 0xFF	; 255
     df8:	79 f0       	breq	.+30     	; 0xe18 <__fp_splitA+0x2a>
     dfa:	87 95       	ror	r24
     dfc:	08 95       	ret
     dfe:	12 16       	cp	r1, r18
     e00:	13 06       	cpc	r1, r19
     e02:	14 06       	cpc	r1, r20
     e04:	55 1f       	adc	r21, r21
     e06:	f2 cf       	rjmp	.-28     	; 0xdec <__fp_split3+0xe>
     e08:	46 95       	lsr	r20
     e0a:	f1 df       	rcall	.-30     	; 0xdee <__fp_splitA>
     e0c:	08 c0       	rjmp	.+16     	; 0xe1e <__fp_splitA+0x30>
     e0e:	16 16       	cp	r1, r22
     e10:	17 06       	cpc	r1, r23
     e12:	18 06       	cpc	r1, r24
     e14:	99 1f       	adc	r25, r25
     e16:	f1 cf       	rjmp	.-30     	; 0xdfa <__fp_splitA+0xc>
     e18:	86 95       	lsr	r24
     e1a:	71 05       	cpc	r23, r1
     e1c:	61 05       	cpc	r22, r1
     e1e:	08 94       	sec
     e20:	08 95       	ret

00000e22 <__fp_zero>:
     e22:	e8 94       	clt

00000e24 <__fp_szero>:
     e24:	bb 27       	eor	r27, r27
     e26:	66 27       	eor	r22, r22
     e28:	77 27       	eor	r23, r23
     e2a:	cb 01       	movw	r24, r22
     e2c:	97 f9       	bld	r25, 7
     e2e:	08 95       	ret

00000e30 <__gesf2>:
     e30:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fp_cmp>
     e34:	08 f4       	brcc	.+2      	; 0xe38 <__gesf2+0x8>
     e36:	8f ef       	ldi	r24, 0xFF	; 255
     e38:	08 95       	ret

00000e3a <__mulsf3>:
     e3a:	0e 94 30 07 	call	0xe60	; 0xe60 <__mulsf3x>
     e3e:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <__fp_round>
     e42:	0e 94 d0 06 	call	0xda0	; 0xda0 <__fp_pscA>
     e46:	38 f0       	brcs	.+14     	; 0xe56 <__mulsf3+0x1c>
     e48:	0e 94 d7 06 	call	0xdae	; 0xdae <__fp_pscB>
     e4c:	20 f0       	brcs	.+8      	; 0xe56 <__mulsf3+0x1c>
     e4e:	95 23       	and	r25, r21
     e50:	11 f0       	breq	.+4      	; 0xe56 <__mulsf3+0x1c>
     e52:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <__fp_inf>
     e56:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <__fp_nan>
     e5a:	11 24       	eor	r1, r1
     e5c:	0c 94 12 07 	jmp	0xe24	; 0xe24 <__fp_szero>

00000e60 <__mulsf3x>:
     e60:	0e 94 ef 06 	call	0xdde	; 0xdde <__fp_split3>
     e64:	70 f3       	brcs	.-36     	; 0xe42 <__mulsf3+0x8>

00000e66 <__mulsf3_pse>:
     e66:	95 9f       	mul	r25, r21
     e68:	c1 f3       	breq	.-16     	; 0xe5a <__mulsf3+0x20>
     e6a:	95 0f       	add	r25, r21
     e6c:	50 e0       	ldi	r21, 0x00	; 0
     e6e:	55 1f       	adc	r21, r21
     e70:	62 9f       	mul	r22, r18
     e72:	f0 01       	movw	r30, r0
     e74:	72 9f       	mul	r23, r18
     e76:	bb 27       	eor	r27, r27
     e78:	f0 0d       	add	r31, r0
     e7a:	b1 1d       	adc	r27, r1
     e7c:	63 9f       	mul	r22, r19
     e7e:	aa 27       	eor	r26, r26
     e80:	f0 0d       	add	r31, r0
     e82:	b1 1d       	adc	r27, r1
     e84:	aa 1f       	adc	r26, r26
     e86:	64 9f       	mul	r22, r20
     e88:	66 27       	eor	r22, r22
     e8a:	b0 0d       	add	r27, r0
     e8c:	a1 1d       	adc	r26, r1
     e8e:	66 1f       	adc	r22, r22
     e90:	82 9f       	mul	r24, r18
     e92:	22 27       	eor	r18, r18
     e94:	b0 0d       	add	r27, r0
     e96:	a1 1d       	adc	r26, r1
     e98:	62 1f       	adc	r22, r18
     e9a:	73 9f       	mul	r23, r19
     e9c:	b0 0d       	add	r27, r0
     e9e:	a1 1d       	adc	r26, r1
     ea0:	62 1f       	adc	r22, r18
     ea2:	83 9f       	mul	r24, r19
     ea4:	a0 0d       	add	r26, r0
     ea6:	61 1d       	adc	r22, r1
     ea8:	22 1f       	adc	r18, r18
     eaa:	74 9f       	mul	r23, r20
     eac:	33 27       	eor	r19, r19
     eae:	a0 0d       	add	r26, r0
     eb0:	61 1d       	adc	r22, r1
     eb2:	23 1f       	adc	r18, r19
     eb4:	84 9f       	mul	r24, r20
     eb6:	60 0d       	add	r22, r0
     eb8:	21 1d       	adc	r18, r1
     eba:	82 2f       	mov	r24, r18
     ebc:	76 2f       	mov	r23, r22
     ebe:	6a 2f       	mov	r22, r26
     ec0:	11 24       	eor	r1, r1
     ec2:	9f 57       	subi	r25, 0x7F	; 127
     ec4:	50 40       	sbci	r21, 0x00	; 0
     ec6:	9a f0       	brmi	.+38     	; 0xeee <__mulsf3_pse+0x88>
     ec8:	f1 f0       	breq	.+60     	; 0xf06 <__mulsf3_pse+0xa0>
     eca:	88 23       	and	r24, r24
     ecc:	4a f0       	brmi	.+18     	; 0xee0 <__mulsf3_pse+0x7a>
     ece:	ee 0f       	add	r30, r30
     ed0:	ff 1f       	adc	r31, r31
     ed2:	bb 1f       	adc	r27, r27
     ed4:	66 1f       	adc	r22, r22
     ed6:	77 1f       	adc	r23, r23
     ed8:	88 1f       	adc	r24, r24
     eda:	91 50       	subi	r25, 0x01	; 1
     edc:	50 40       	sbci	r21, 0x00	; 0
     ede:	a9 f7       	brne	.-22     	; 0xeca <__mulsf3_pse+0x64>
     ee0:	9e 3f       	cpi	r25, 0xFE	; 254
     ee2:	51 05       	cpc	r21, r1
     ee4:	80 f0       	brcs	.+32     	; 0xf06 <__mulsf3_pse+0xa0>
     ee6:	0c 94 c7 06 	jmp	0xd8e	; 0xd8e <__fp_inf>
     eea:	0c 94 12 07 	jmp	0xe24	; 0xe24 <__fp_szero>
     eee:	5f 3f       	cpi	r21, 0xFF	; 255
     ef0:	e4 f3       	brlt	.-8      	; 0xeea <__mulsf3_pse+0x84>
     ef2:	98 3e       	cpi	r25, 0xE8	; 232
     ef4:	d4 f3       	brlt	.-12     	; 0xeea <__mulsf3_pse+0x84>
     ef6:	86 95       	lsr	r24
     ef8:	77 95       	ror	r23
     efa:	67 95       	ror	r22
     efc:	b7 95       	ror	r27
     efe:	f7 95       	ror	r31
     f00:	e7 95       	ror	r30
     f02:	9f 5f       	subi	r25, 0xFF	; 255
     f04:	c1 f7       	brne	.-16     	; 0xef6 <__mulsf3_pse+0x90>
     f06:	fe 2b       	or	r31, r30
     f08:	88 0f       	add	r24, r24
     f0a:	91 1d       	adc	r25, r1
     f0c:	96 95       	lsr	r25
     f0e:	87 95       	ror	r24
     f10:	97 f9       	bld	r25, 7
     f12:	08 95       	ret

00000f14 <sprintf>:
     f14:	ae e0       	ldi	r26, 0x0E	; 14
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e0 e9       	ldi	r30, 0x90	; 144
     f1a:	f7 e0       	ldi	r31, 0x07	; 7
     f1c:	0c 94 4b 0a 	jmp	0x1496	; 0x1496 <__prologue_saves__+0x1c>
     f20:	0d 89       	ldd	r16, Y+21	; 0x15
     f22:	1e 89       	ldd	r17, Y+22	; 0x16
     f24:	86 e0       	ldi	r24, 0x06	; 6
     f26:	8c 83       	std	Y+4, r24	; 0x04
     f28:	1a 83       	std	Y+2, r17	; 0x02
     f2a:	09 83       	std	Y+1, r16	; 0x01
     f2c:	8f ef       	ldi	r24, 0xFF	; 255
     f2e:	9f e7       	ldi	r25, 0x7F	; 127
     f30:	9e 83       	std	Y+6, r25	; 0x06
     f32:	8d 83       	std	Y+5, r24	; 0x05
     f34:	ae 01       	movw	r20, r28
     f36:	47 5e       	subi	r20, 0xE7	; 231
     f38:	5f 4f       	sbci	r21, 0xFF	; 255
     f3a:	6f 89       	ldd	r22, Y+23	; 0x17
     f3c:	78 8d       	ldd	r23, Y+24	; 0x18
     f3e:	ce 01       	movw	r24, r28
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	0e 94 ac 07 	call	0xf58	; 0xf58 <vfprintf>
     f46:	ef 81       	ldd	r30, Y+7	; 0x07
     f48:	f8 85       	ldd	r31, Y+8	; 0x08
     f4a:	e0 0f       	add	r30, r16
     f4c:	f1 1f       	adc	r31, r17
     f4e:	10 82       	st	Z, r1
     f50:	2e 96       	adiw	r28, 0x0e	; 14
     f52:	e4 e0       	ldi	r30, 0x04	; 4
     f54:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__epilogue_restores__+0x1c>

00000f58 <vfprintf>:
     f58:	ab e0       	ldi	r26, 0x0B	; 11
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	e2 eb       	ldi	r30, 0xB2	; 178
     f5e:	f7 e0       	ldi	r31, 0x07	; 7
     f60:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <__prologue_saves__>
     f64:	6c 01       	movw	r12, r24
     f66:	7b 01       	movw	r14, r22
     f68:	8a 01       	movw	r16, r20
     f6a:	fc 01       	movw	r30, r24
     f6c:	17 82       	std	Z+7, r1	; 0x07
     f6e:	16 82       	std	Z+6, r1	; 0x06
     f70:	83 81       	ldd	r24, Z+3	; 0x03
     f72:	81 ff       	sbrs	r24, 1
     f74:	cc c1       	rjmp	.+920    	; 0x130e <vfprintf+0x3b6>
     f76:	ce 01       	movw	r24, r28
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	3c 01       	movw	r6, r24
     f7c:	f6 01       	movw	r30, r12
     f7e:	93 81       	ldd	r25, Z+3	; 0x03
     f80:	f7 01       	movw	r30, r14
     f82:	93 fd       	sbrc	r25, 3
     f84:	85 91       	lpm	r24, Z+
     f86:	93 ff       	sbrs	r25, 3
     f88:	81 91       	ld	r24, Z+
     f8a:	7f 01       	movw	r14, r30
     f8c:	88 23       	and	r24, r24
     f8e:	09 f4       	brne	.+2      	; 0xf92 <vfprintf+0x3a>
     f90:	ba c1       	rjmp	.+884    	; 0x1306 <vfprintf+0x3ae>
     f92:	85 32       	cpi	r24, 0x25	; 37
     f94:	39 f4       	brne	.+14     	; 0xfa4 <vfprintf+0x4c>
     f96:	93 fd       	sbrc	r25, 3
     f98:	85 91       	lpm	r24, Z+
     f9a:	93 ff       	sbrs	r25, 3
     f9c:	81 91       	ld	r24, Z+
     f9e:	7f 01       	movw	r14, r30
     fa0:	85 32       	cpi	r24, 0x25	; 37
     fa2:	29 f4       	brne	.+10     	; 0xfae <vfprintf+0x56>
     fa4:	b6 01       	movw	r22, r12
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
     fac:	e7 cf       	rjmp	.-50     	; 0xf7c <vfprintf+0x24>
     fae:	91 2c       	mov	r9, r1
     fb0:	21 2c       	mov	r2, r1
     fb2:	31 2c       	mov	r3, r1
     fb4:	ff e1       	ldi	r31, 0x1F	; 31
     fb6:	f3 15       	cp	r31, r3
     fb8:	d8 f0       	brcs	.+54     	; 0xff0 <vfprintf+0x98>
     fba:	8b 32       	cpi	r24, 0x2B	; 43
     fbc:	79 f0       	breq	.+30     	; 0xfdc <vfprintf+0x84>
     fbe:	38 f4       	brcc	.+14     	; 0xfce <vfprintf+0x76>
     fc0:	80 32       	cpi	r24, 0x20	; 32
     fc2:	79 f0       	breq	.+30     	; 0xfe2 <vfprintf+0x8a>
     fc4:	83 32       	cpi	r24, 0x23	; 35
     fc6:	a1 f4       	brne	.+40     	; 0xff0 <vfprintf+0x98>
     fc8:	23 2d       	mov	r18, r3
     fca:	20 61       	ori	r18, 0x10	; 16
     fcc:	1d c0       	rjmp	.+58     	; 0x1008 <vfprintf+0xb0>
     fce:	8d 32       	cpi	r24, 0x2D	; 45
     fd0:	61 f0       	breq	.+24     	; 0xfea <vfprintf+0x92>
     fd2:	80 33       	cpi	r24, 0x30	; 48
     fd4:	69 f4       	brne	.+26     	; 0xff0 <vfprintf+0x98>
     fd6:	23 2d       	mov	r18, r3
     fd8:	21 60       	ori	r18, 0x01	; 1
     fda:	16 c0       	rjmp	.+44     	; 0x1008 <vfprintf+0xb0>
     fdc:	83 2d       	mov	r24, r3
     fde:	82 60       	ori	r24, 0x02	; 2
     fe0:	38 2e       	mov	r3, r24
     fe2:	e3 2d       	mov	r30, r3
     fe4:	e4 60       	ori	r30, 0x04	; 4
     fe6:	3e 2e       	mov	r3, r30
     fe8:	2a c0       	rjmp	.+84     	; 0x103e <vfprintf+0xe6>
     fea:	f3 2d       	mov	r31, r3
     fec:	f8 60       	ori	r31, 0x08	; 8
     fee:	1d c0       	rjmp	.+58     	; 0x102a <vfprintf+0xd2>
     ff0:	37 fc       	sbrc	r3, 7
     ff2:	2d c0       	rjmp	.+90     	; 0x104e <vfprintf+0xf6>
     ff4:	20 ed       	ldi	r18, 0xD0	; 208
     ff6:	28 0f       	add	r18, r24
     ff8:	2a 30       	cpi	r18, 0x0A	; 10
     ffa:	40 f0       	brcs	.+16     	; 0x100c <vfprintf+0xb4>
     ffc:	8e 32       	cpi	r24, 0x2E	; 46
     ffe:	b9 f4       	brne	.+46     	; 0x102e <vfprintf+0xd6>
    1000:	36 fc       	sbrc	r3, 6
    1002:	81 c1       	rjmp	.+770    	; 0x1306 <vfprintf+0x3ae>
    1004:	23 2d       	mov	r18, r3
    1006:	20 64       	ori	r18, 0x40	; 64
    1008:	32 2e       	mov	r3, r18
    100a:	19 c0       	rjmp	.+50     	; 0x103e <vfprintf+0xe6>
    100c:	36 fe       	sbrs	r3, 6
    100e:	06 c0       	rjmp	.+12     	; 0x101c <vfprintf+0xc4>
    1010:	8a e0       	ldi	r24, 0x0A	; 10
    1012:	98 9e       	mul	r9, r24
    1014:	20 0d       	add	r18, r0
    1016:	11 24       	eor	r1, r1
    1018:	92 2e       	mov	r9, r18
    101a:	11 c0       	rjmp	.+34     	; 0x103e <vfprintf+0xe6>
    101c:	ea e0       	ldi	r30, 0x0A	; 10
    101e:	2e 9e       	mul	r2, r30
    1020:	20 0d       	add	r18, r0
    1022:	11 24       	eor	r1, r1
    1024:	22 2e       	mov	r2, r18
    1026:	f3 2d       	mov	r31, r3
    1028:	f0 62       	ori	r31, 0x20	; 32
    102a:	3f 2e       	mov	r3, r31
    102c:	08 c0       	rjmp	.+16     	; 0x103e <vfprintf+0xe6>
    102e:	8c 36       	cpi	r24, 0x6C	; 108
    1030:	21 f4       	brne	.+8      	; 0x103a <vfprintf+0xe2>
    1032:	83 2d       	mov	r24, r3
    1034:	80 68       	ori	r24, 0x80	; 128
    1036:	38 2e       	mov	r3, r24
    1038:	02 c0       	rjmp	.+4      	; 0x103e <vfprintf+0xe6>
    103a:	88 36       	cpi	r24, 0x68	; 104
    103c:	41 f4       	brne	.+16     	; 0x104e <vfprintf+0xf6>
    103e:	f7 01       	movw	r30, r14
    1040:	93 fd       	sbrc	r25, 3
    1042:	85 91       	lpm	r24, Z+
    1044:	93 ff       	sbrs	r25, 3
    1046:	81 91       	ld	r24, Z+
    1048:	7f 01       	movw	r14, r30
    104a:	81 11       	cpse	r24, r1
    104c:	b3 cf       	rjmp	.-154    	; 0xfb4 <vfprintf+0x5c>
    104e:	98 2f       	mov	r25, r24
    1050:	9f 7d       	andi	r25, 0xDF	; 223
    1052:	95 54       	subi	r25, 0x45	; 69
    1054:	93 30       	cpi	r25, 0x03	; 3
    1056:	28 f4       	brcc	.+10     	; 0x1062 <vfprintf+0x10a>
    1058:	0c 5f       	subi	r16, 0xFC	; 252
    105a:	1f 4f       	sbci	r17, 0xFF	; 255
    105c:	9f e3       	ldi	r25, 0x3F	; 63
    105e:	99 83       	std	Y+1, r25	; 0x01
    1060:	0d c0       	rjmp	.+26     	; 0x107c <vfprintf+0x124>
    1062:	83 36       	cpi	r24, 0x63	; 99
    1064:	31 f0       	breq	.+12     	; 0x1072 <vfprintf+0x11a>
    1066:	83 37       	cpi	r24, 0x73	; 115
    1068:	71 f0       	breq	.+28     	; 0x1086 <vfprintf+0x12e>
    106a:	83 35       	cpi	r24, 0x53	; 83
    106c:	09 f0       	breq	.+2      	; 0x1070 <vfprintf+0x118>
    106e:	59 c0       	rjmp	.+178    	; 0x1122 <vfprintf+0x1ca>
    1070:	21 c0       	rjmp	.+66     	; 0x10b4 <vfprintf+0x15c>
    1072:	f8 01       	movw	r30, r16
    1074:	80 81       	ld	r24, Z
    1076:	89 83       	std	Y+1, r24	; 0x01
    1078:	0e 5f       	subi	r16, 0xFE	; 254
    107a:	1f 4f       	sbci	r17, 0xFF	; 255
    107c:	88 24       	eor	r8, r8
    107e:	83 94       	inc	r8
    1080:	91 2c       	mov	r9, r1
    1082:	53 01       	movw	r10, r6
    1084:	13 c0       	rjmp	.+38     	; 0x10ac <vfprintf+0x154>
    1086:	28 01       	movw	r4, r16
    1088:	f2 e0       	ldi	r31, 0x02	; 2
    108a:	4f 0e       	add	r4, r31
    108c:	51 1c       	adc	r5, r1
    108e:	f8 01       	movw	r30, r16
    1090:	a0 80       	ld	r10, Z
    1092:	b1 80       	ldd	r11, Z+1	; 0x01
    1094:	36 fe       	sbrs	r3, 6
    1096:	03 c0       	rjmp	.+6      	; 0x109e <vfprintf+0x146>
    1098:	69 2d       	mov	r22, r9
    109a:	70 e0       	ldi	r23, 0x00	; 0
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <vfprintf+0x14a>
    109e:	6f ef       	ldi	r22, 0xFF	; 255
    10a0:	7f ef       	ldi	r23, 0xFF	; 255
    10a2:	c5 01       	movw	r24, r10
    10a4:	0e 94 98 09 	call	0x1330	; 0x1330 <strnlen>
    10a8:	4c 01       	movw	r8, r24
    10aa:	82 01       	movw	r16, r4
    10ac:	f3 2d       	mov	r31, r3
    10ae:	ff 77       	andi	r31, 0x7F	; 127
    10b0:	3f 2e       	mov	r3, r31
    10b2:	16 c0       	rjmp	.+44     	; 0x10e0 <vfprintf+0x188>
    10b4:	28 01       	movw	r4, r16
    10b6:	22 e0       	ldi	r18, 0x02	; 2
    10b8:	42 0e       	add	r4, r18
    10ba:	51 1c       	adc	r5, r1
    10bc:	f8 01       	movw	r30, r16
    10be:	a0 80       	ld	r10, Z
    10c0:	b1 80       	ldd	r11, Z+1	; 0x01
    10c2:	36 fe       	sbrs	r3, 6
    10c4:	03 c0       	rjmp	.+6      	; 0x10cc <vfprintf+0x174>
    10c6:	69 2d       	mov	r22, r9
    10c8:	70 e0       	ldi	r23, 0x00	; 0
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <vfprintf+0x178>
    10cc:	6f ef       	ldi	r22, 0xFF	; 255
    10ce:	7f ef       	ldi	r23, 0xFF	; 255
    10d0:	c5 01       	movw	r24, r10
    10d2:	0e 94 8d 09 	call	0x131a	; 0x131a <strnlen_P>
    10d6:	4c 01       	movw	r8, r24
    10d8:	f3 2d       	mov	r31, r3
    10da:	f0 68       	ori	r31, 0x80	; 128
    10dc:	3f 2e       	mov	r3, r31
    10de:	82 01       	movw	r16, r4
    10e0:	33 fc       	sbrc	r3, 3
    10e2:	1b c0       	rjmp	.+54     	; 0x111a <vfprintf+0x1c2>
    10e4:	82 2d       	mov	r24, r2
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	88 16       	cp	r8, r24
    10ea:	99 06       	cpc	r9, r25
    10ec:	b0 f4       	brcc	.+44     	; 0x111a <vfprintf+0x1c2>
    10ee:	b6 01       	movw	r22, r12
    10f0:	80 e2       	ldi	r24, 0x20	; 32
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    10f8:	2a 94       	dec	r2
    10fa:	f4 cf       	rjmp	.-24     	; 0x10e4 <vfprintf+0x18c>
    10fc:	f5 01       	movw	r30, r10
    10fe:	37 fc       	sbrc	r3, 7
    1100:	85 91       	lpm	r24, Z+
    1102:	37 fe       	sbrs	r3, 7
    1104:	81 91       	ld	r24, Z+
    1106:	5f 01       	movw	r10, r30
    1108:	b6 01       	movw	r22, r12
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    1110:	21 10       	cpse	r2, r1
    1112:	2a 94       	dec	r2
    1114:	21 e0       	ldi	r18, 0x01	; 1
    1116:	82 1a       	sub	r8, r18
    1118:	91 08       	sbc	r9, r1
    111a:	81 14       	cp	r8, r1
    111c:	91 04       	cpc	r9, r1
    111e:	71 f7       	brne	.-36     	; 0x10fc <vfprintf+0x1a4>
    1120:	e8 c0       	rjmp	.+464    	; 0x12f2 <vfprintf+0x39a>
    1122:	84 36       	cpi	r24, 0x64	; 100
    1124:	11 f0       	breq	.+4      	; 0x112a <vfprintf+0x1d2>
    1126:	89 36       	cpi	r24, 0x69	; 105
    1128:	41 f5       	brne	.+80     	; 0x117a <vfprintf+0x222>
    112a:	f8 01       	movw	r30, r16
    112c:	37 fe       	sbrs	r3, 7
    112e:	07 c0       	rjmp	.+14     	; 0x113e <vfprintf+0x1e6>
    1130:	60 81       	ld	r22, Z
    1132:	71 81       	ldd	r23, Z+1	; 0x01
    1134:	82 81       	ldd	r24, Z+2	; 0x02
    1136:	93 81       	ldd	r25, Z+3	; 0x03
    1138:	0c 5f       	subi	r16, 0xFC	; 252
    113a:	1f 4f       	sbci	r17, 0xFF	; 255
    113c:	08 c0       	rjmp	.+16     	; 0x114e <vfprintf+0x1f6>
    113e:	60 81       	ld	r22, Z
    1140:	71 81       	ldd	r23, Z+1	; 0x01
    1142:	07 2e       	mov	r0, r23
    1144:	00 0c       	add	r0, r0
    1146:	88 0b       	sbc	r24, r24
    1148:	99 0b       	sbc	r25, r25
    114a:	0e 5f       	subi	r16, 0xFE	; 254
    114c:	1f 4f       	sbci	r17, 0xFF	; 255
    114e:	f3 2d       	mov	r31, r3
    1150:	ff 76       	andi	r31, 0x6F	; 111
    1152:	3f 2e       	mov	r3, r31
    1154:	97 ff       	sbrs	r25, 7
    1156:	09 c0       	rjmp	.+18     	; 0x116a <vfprintf+0x212>
    1158:	90 95       	com	r25
    115a:	80 95       	com	r24
    115c:	70 95       	com	r23
    115e:	61 95       	neg	r22
    1160:	7f 4f       	sbci	r23, 0xFF	; 255
    1162:	8f 4f       	sbci	r24, 0xFF	; 255
    1164:	9f 4f       	sbci	r25, 0xFF	; 255
    1166:	f0 68       	ori	r31, 0x80	; 128
    1168:	3f 2e       	mov	r3, r31
    116a:	2a e0       	ldi	r18, 0x0A	; 10
    116c:	30 e0       	ldi	r19, 0x00	; 0
    116e:	a3 01       	movw	r20, r6
    1170:	0e 94 df 09 	call	0x13be	; 0x13be <__ultoa_invert>
    1174:	88 2e       	mov	r8, r24
    1176:	86 18       	sub	r8, r6
    1178:	45 c0       	rjmp	.+138    	; 0x1204 <vfprintf+0x2ac>
    117a:	85 37       	cpi	r24, 0x75	; 117
    117c:	31 f4       	brne	.+12     	; 0x118a <vfprintf+0x232>
    117e:	23 2d       	mov	r18, r3
    1180:	2f 7e       	andi	r18, 0xEF	; 239
    1182:	b2 2e       	mov	r11, r18
    1184:	2a e0       	ldi	r18, 0x0A	; 10
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	25 c0       	rjmp	.+74     	; 0x11d4 <vfprintf+0x27c>
    118a:	93 2d       	mov	r25, r3
    118c:	99 7f       	andi	r25, 0xF9	; 249
    118e:	b9 2e       	mov	r11, r25
    1190:	8f 36       	cpi	r24, 0x6F	; 111
    1192:	c1 f0       	breq	.+48     	; 0x11c4 <vfprintf+0x26c>
    1194:	18 f4       	brcc	.+6      	; 0x119c <vfprintf+0x244>
    1196:	88 35       	cpi	r24, 0x58	; 88
    1198:	79 f0       	breq	.+30     	; 0x11b8 <vfprintf+0x260>
    119a:	b5 c0       	rjmp	.+362    	; 0x1306 <vfprintf+0x3ae>
    119c:	80 37       	cpi	r24, 0x70	; 112
    119e:	19 f0       	breq	.+6      	; 0x11a6 <vfprintf+0x24e>
    11a0:	88 37       	cpi	r24, 0x78	; 120
    11a2:	21 f0       	breq	.+8      	; 0x11ac <vfprintf+0x254>
    11a4:	b0 c0       	rjmp	.+352    	; 0x1306 <vfprintf+0x3ae>
    11a6:	e9 2f       	mov	r30, r25
    11a8:	e0 61       	ori	r30, 0x10	; 16
    11aa:	be 2e       	mov	r11, r30
    11ac:	b4 fe       	sbrs	r11, 4
    11ae:	0d c0       	rjmp	.+26     	; 0x11ca <vfprintf+0x272>
    11b0:	fb 2d       	mov	r31, r11
    11b2:	f4 60       	ori	r31, 0x04	; 4
    11b4:	bf 2e       	mov	r11, r31
    11b6:	09 c0       	rjmp	.+18     	; 0x11ca <vfprintf+0x272>
    11b8:	34 fe       	sbrs	r3, 4
    11ba:	0a c0       	rjmp	.+20     	; 0x11d0 <vfprintf+0x278>
    11bc:	29 2f       	mov	r18, r25
    11be:	26 60       	ori	r18, 0x06	; 6
    11c0:	b2 2e       	mov	r11, r18
    11c2:	06 c0       	rjmp	.+12     	; 0x11d0 <vfprintf+0x278>
    11c4:	28 e0       	ldi	r18, 0x08	; 8
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	05 c0       	rjmp	.+10     	; 0x11d4 <vfprintf+0x27c>
    11ca:	20 e1       	ldi	r18, 0x10	; 16
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	02 c0       	rjmp	.+4      	; 0x11d4 <vfprintf+0x27c>
    11d0:	20 e1       	ldi	r18, 0x10	; 16
    11d2:	32 e0       	ldi	r19, 0x02	; 2
    11d4:	f8 01       	movw	r30, r16
    11d6:	b7 fe       	sbrs	r11, 7
    11d8:	07 c0       	rjmp	.+14     	; 0x11e8 <vfprintf+0x290>
    11da:	60 81       	ld	r22, Z
    11dc:	71 81       	ldd	r23, Z+1	; 0x01
    11de:	82 81       	ldd	r24, Z+2	; 0x02
    11e0:	93 81       	ldd	r25, Z+3	; 0x03
    11e2:	0c 5f       	subi	r16, 0xFC	; 252
    11e4:	1f 4f       	sbci	r17, 0xFF	; 255
    11e6:	06 c0       	rjmp	.+12     	; 0x11f4 <vfprintf+0x29c>
    11e8:	60 81       	ld	r22, Z
    11ea:	71 81       	ldd	r23, Z+1	; 0x01
    11ec:	80 e0       	ldi	r24, 0x00	; 0
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	0e 5f       	subi	r16, 0xFE	; 254
    11f2:	1f 4f       	sbci	r17, 0xFF	; 255
    11f4:	a3 01       	movw	r20, r6
    11f6:	0e 94 df 09 	call	0x13be	; 0x13be <__ultoa_invert>
    11fa:	88 2e       	mov	r8, r24
    11fc:	86 18       	sub	r8, r6
    11fe:	fb 2d       	mov	r31, r11
    1200:	ff 77       	andi	r31, 0x7F	; 127
    1202:	3f 2e       	mov	r3, r31
    1204:	36 fe       	sbrs	r3, 6
    1206:	0d c0       	rjmp	.+26     	; 0x1222 <vfprintf+0x2ca>
    1208:	23 2d       	mov	r18, r3
    120a:	2e 7f       	andi	r18, 0xFE	; 254
    120c:	a2 2e       	mov	r10, r18
    120e:	89 14       	cp	r8, r9
    1210:	58 f4       	brcc	.+22     	; 0x1228 <vfprintf+0x2d0>
    1212:	34 fe       	sbrs	r3, 4
    1214:	0b c0       	rjmp	.+22     	; 0x122c <vfprintf+0x2d4>
    1216:	32 fc       	sbrc	r3, 2
    1218:	09 c0       	rjmp	.+18     	; 0x122c <vfprintf+0x2d4>
    121a:	83 2d       	mov	r24, r3
    121c:	8e 7e       	andi	r24, 0xEE	; 238
    121e:	a8 2e       	mov	r10, r24
    1220:	05 c0       	rjmp	.+10     	; 0x122c <vfprintf+0x2d4>
    1222:	b8 2c       	mov	r11, r8
    1224:	a3 2c       	mov	r10, r3
    1226:	03 c0       	rjmp	.+6      	; 0x122e <vfprintf+0x2d6>
    1228:	b8 2c       	mov	r11, r8
    122a:	01 c0       	rjmp	.+2      	; 0x122e <vfprintf+0x2d6>
    122c:	b9 2c       	mov	r11, r9
    122e:	a4 fe       	sbrs	r10, 4
    1230:	0f c0       	rjmp	.+30     	; 0x1250 <vfprintf+0x2f8>
    1232:	fe 01       	movw	r30, r28
    1234:	e8 0d       	add	r30, r8
    1236:	f1 1d       	adc	r31, r1
    1238:	80 81       	ld	r24, Z
    123a:	80 33       	cpi	r24, 0x30	; 48
    123c:	21 f4       	brne	.+8      	; 0x1246 <vfprintf+0x2ee>
    123e:	9a 2d       	mov	r25, r10
    1240:	99 7e       	andi	r25, 0xE9	; 233
    1242:	a9 2e       	mov	r10, r25
    1244:	09 c0       	rjmp	.+18     	; 0x1258 <vfprintf+0x300>
    1246:	a2 fe       	sbrs	r10, 2
    1248:	06 c0       	rjmp	.+12     	; 0x1256 <vfprintf+0x2fe>
    124a:	b3 94       	inc	r11
    124c:	b3 94       	inc	r11
    124e:	04 c0       	rjmp	.+8      	; 0x1258 <vfprintf+0x300>
    1250:	8a 2d       	mov	r24, r10
    1252:	86 78       	andi	r24, 0x86	; 134
    1254:	09 f0       	breq	.+2      	; 0x1258 <vfprintf+0x300>
    1256:	b3 94       	inc	r11
    1258:	a3 fc       	sbrc	r10, 3
    125a:	11 c0       	rjmp	.+34     	; 0x127e <vfprintf+0x326>
    125c:	a0 fe       	sbrs	r10, 0
    125e:	06 c0       	rjmp	.+12     	; 0x126c <vfprintf+0x314>
    1260:	b2 14       	cp	r11, r2
    1262:	88 f4       	brcc	.+34     	; 0x1286 <vfprintf+0x32e>
    1264:	28 0c       	add	r2, r8
    1266:	92 2c       	mov	r9, r2
    1268:	9b 18       	sub	r9, r11
    126a:	0e c0       	rjmp	.+28     	; 0x1288 <vfprintf+0x330>
    126c:	b2 14       	cp	r11, r2
    126e:	60 f4       	brcc	.+24     	; 0x1288 <vfprintf+0x330>
    1270:	b6 01       	movw	r22, r12
    1272:	80 e2       	ldi	r24, 0x20	; 32
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    127a:	b3 94       	inc	r11
    127c:	f7 cf       	rjmp	.-18     	; 0x126c <vfprintf+0x314>
    127e:	b2 14       	cp	r11, r2
    1280:	18 f4       	brcc	.+6      	; 0x1288 <vfprintf+0x330>
    1282:	2b 18       	sub	r2, r11
    1284:	02 c0       	rjmp	.+4      	; 0x128a <vfprintf+0x332>
    1286:	98 2c       	mov	r9, r8
    1288:	21 2c       	mov	r2, r1
    128a:	a4 fe       	sbrs	r10, 4
    128c:	10 c0       	rjmp	.+32     	; 0x12ae <vfprintf+0x356>
    128e:	b6 01       	movw	r22, r12
    1290:	80 e3       	ldi	r24, 0x30	; 48
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    1298:	a2 fe       	sbrs	r10, 2
    129a:	17 c0       	rjmp	.+46     	; 0x12ca <vfprintf+0x372>
    129c:	a1 fc       	sbrc	r10, 1
    129e:	03 c0       	rjmp	.+6      	; 0x12a6 <vfprintf+0x34e>
    12a0:	88 e7       	ldi	r24, 0x78	; 120
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	02 c0       	rjmp	.+4      	; 0x12aa <vfprintf+0x352>
    12a6:	88 e5       	ldi	r24, 0x58	; 88
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	b6 01       	movw	r22, r12
    12ac:	0c c0       	rjmp	.+24     	; 0x12c6 <vfprintf+0x36e>
    12ae:	8a 2d       	mov	r24, r10
    12b0:	86 78       	andi	r24, 0x86	; 134
    12b2:	59 f0       	breq	.+22     	; 0x12ca <vfprintf+0x372>
    12b4:	a1 fe       	sbrs	r10, 1
    12b6:	02 c0       	rjmp	.+4      	; 0x12bc <vfprintf+0x364>
    12b8:	8b e2       	ldi	r24, 0x2B	; 43
    12ba:	01 c0       	rjmp	.+2      	; 0x12be <vfprintf+0x366>
    12bc:	80 e2       	ldi	r24, 0x20	; 32
    12be:	a7 fc       	sbrc	r10, 7
    12c0:	8d e2       	ldi	r24, 0x2D	; 45
    12c2:	b6 01       	movw	r22, r12
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    12ca:	89 14       	cp	r8, r9
    12cc:	38 f4       	brcc	.+14     	; 0x12dc <vfprintf+0x384>
    12ce:	b6 01       	movw	r22, r12
    12d0:	80 e3       	ldi	r24, 0x30	; 48
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    12d8:	9a 94       	dec	r9
    12da:	f7 cf       	rjmp	.-18     	; 0x12ca <vfprintf+0x372>
    12dc:	8a 94       	dec	r8
    12de:	f3 01       	movw	r30, r6
    12e0:	e8 0d       	add	r30, r8
    12e2:	f1 1d       	adc	r31, r1
    12e4:	80 81       	ld	r24, Z
    12e6:	b6 01       	movw	r22, r12
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    12ee:	81 10       	cpse	r8, r1
    12f0:	f5 cf       	rjmp	.-22     	; 0x12dc <vfprintf+0x384>
    12f2:	22 20       	and	r2, r2
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <vfprintf+0x3a0>
    12f6:	42 ce       	rjmp	.-892    	; 0xf7c <vfprintf+0x24>
    12f8:	b6 01       	movw	r22, r12
    12fa:	80 e2       	ldi	r24, 0x20	; 32
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	0e 94 a3 09 	call	0x1346	; 0x1346 <fputc>
    1302:	2a 94       	dec	r2
    1304:	f6 cf       	rjmp	.-20     	; 0x12f2 <vfprintf+0x39a>
    1306:	f6 01       	movw	r30, r12
    1308:	86 81       	ldd	r24, Z+6	; 0x06
    130a:	97 81       	ldd	r25, Z+7	; 0x07
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <vfprintf+0x3ba>
    130e:	8f ef       	ldi	r24, 0xFF	; 255
    1310:	9f ef       	ldi	r25, 0xFF	; 255
    1312:	2b 96       	adiw	r28, 0x0b	; 11
    1314:	e2 e1       	ldi	r30, 0x12	; 18
    1316:	0c 94 59 0a 	jmp	0x14b2	; 0x14b2 <__epilogue_restores__>

0000131a <strnlen_P>:
    131a:	fc 01       	movw	r30, r24
    131c:	05 90       	lpm	r0, Z+
    131e:	61 50       	subi	r22, 0x01	; 1
    1320:	70 40       	sbci	r23, 0x00	; 0
    1322:	01 10       	cpse	r0, r1
    1324:	d8 f7       	brcc	.-10     	; 0x131c <strnlen_P+0x2>
    1326:	80 95       	com	r24
    1328:	90 95       	com	r25
    132a:	8e 0f       	add	r24, r30
    132c:	9f 1f       	adc	r25, r31
    132e:	08 95       	ret

00001330 <strnlen>:
    1330:	fc 01       	movw	r30, r24
    1332:	61 50       	subi	r22, 0x01	; 1
    1334:	70 40       	sbci	r23, 0x00	; 0
    1336:	01 90       	ld	r0, Z+
    1338:	01 10       	cpse	r0, r1
    133a:	d8 f7       	brcc	.-10     	; 0x1332 <strnlen+0x2>
    133c:	80 95       	com	r24
    133e:	90 95       	com	r25
    1340:	8e 0f       	add	r24, r30
    1342:	9f 1f       	adc	r25, r31
    1344:	08 95       	ret

00001346 <fputc>:
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	fb 01       	movw	r30, r22
    1350:	23 81       	ldd	r18, Z+3	; 0x03
    1352:	21 fd       	sbrc	r18, 1
    1354:	03 c0       	rjmp	.+6      	; 0x135c <fputc+0x16>
    1356:	8f ef       	ldi	r24, 0xFF	; 255
    1358:	9f ef       	ldi	r25, 0xFF	; 255
    135a:	2c c0       	rjmp	.+88     	; 0x13b4 <fputc+0x6e>
    135c:	22 ff       	sbrs	r18, 2
    135e:	16 c0       	rjmp	.+44     	; 0x138c <fputc+0x46>
    1360:	46 81       	ldd	r20, Z+6	; 0x06
    1362:	57 81       	ldd	r21, Z+7	; 0x07
    1364:	24 81       	ldd	r18, Z+4	; 0x04
    1366:	35 81       	ldd	r19, Z+5	; 0x05
    1368:	42 17       	cp	r20, r18
    136a:	53 07       	cpc	r21, r19
    136c:	44 f4       	brge	.+16     	; 0x137e <fputc+0x38>
    136e:	a0 81       	ld	r26, Z
    1370:	b1 81       	ldd	r27, Z+1	; 0x01
    1372:	9d 01       	movw	r18, r26
    1374:	2f 5f       	subi	r18, 0xFF	; 255
    1376:	3f 4f       	sbci	r19, 0xFF	; 255
    1378:	31 83       	std	Z+1, r19	; 0x01
    137a:	20 83       	st	Z, r18
    137c:	8c 93       	st	X, r24
    137e:	26 81       	ldd	r18, Z+6	; 0x06
    1380:	37 81       	ldd	r19, Z+7	; 0x07
    1382:	2f 5f       	subi	r18, 0xFF	; 255
    1384:	3f 4f       	sbci	r19, 0xFF	; 255
    1386:	37 83       	std	Z+7, r19	; 0x07
    1388:	26 83       	std	Z+6, r18	; 0x06
    138a:	14 c0       	rjmp	.+40     	; 0x13b4 <fputc+0x6e>
    138c:	8b 01       	movw	r16, r22
    138e:	ec 01       	movw	r28, r24
    1390:	fb 01       	movw	r30, r22
    1392:	00 84       	ldd	r0, Z+8	; 0x08
    1394:	f1 85       	ldd	r31, Z+9	; 0x09
    1396:	e0 2d       	mov	r30, r0
    1398:	09 95       	icall
    139a:	89 2b       	or	r24, r25
    139c:	e1 f6       	brne	.-72     	; 0x1356 <fputc+0x10>
    139e:	d8 01       	movw	r26, r16
    13a0:	16 96       	adiw	r26, 0x06	; 6
    13a2:	8d 91       	ld	r24, X+
    13a4:	9c 91       	ld	r25, X
    13a6:	17 97       	sbiw	r26, 0x07	; 7
    13a8:	01 96       	adiw	r24, 0x01	; 1
    13aa:	17 96       	adiw	r26, 0x07	; 7
    13ac:	9c 93       	st	X, r25
    13ae:	8e 93       	st	-X, r24
    13b0:	16 97       	sbiw	r26, 0x06	; 6
    13b2:	ce 01       	movw	r24, r28
    13b4:	df 91       	pop	r29
    13b6:	cf 91       	pop	r28
    13b8:	1f 91       	pop	r17
    13ba:	0f 91       	pop	r16
    13bc:	08 95       	ret

000013be <__ultoa_invert>:
    13be:	fa 01       	movw	r30, r20
    13c0:	aa 27       	eor	r26, r26
    13c2:	28 30       	cpi	r18, 0x08	; 8
    13c4:	51 f1       	breq	.+84     	; 0x141a <__ultoa_invert+0x5c>
    13c6:	20 31       	cpi	r18, 0x10	; 16
    13c8:	81 f1       	breq	.+96     	; 0x142a <__ultoa_invert+0x6c>
    13ca:	e8 94       	clt
    13cc:	6f 93       	push	r22
    13ce:	6e 7f       	andi	r22, 0xFE	; 254
    13d0:	6e 5f       	subi	r22, 0xFE	; 254
    13d2:	7f 4f       	sbci	r23, 0xFF	; 255
    13d4:	8f 4f       	sbci	r24, 0xFF	; 255
    13d6:	9f 4f       	sbci	r25, 0xFF	; 255
    13d8:	af 4f       	sbci	r26, 0xFF	; 255
    13da:	b1 e0       	ldi	r27, 0x01	; 1
    13dc:	3e d0       	rcall	.+124    	; 0x145a <__ultoa_invert+0x9c>
    13de:	b4 e0       	ldi	r27, 0x04	; 4
    13e0:	3c d0       	rcall	.+120    	; 0x145a <__ultoa_invert+0x9c>
    13e2:	67 0f       	add	r22, r23
    13e4:	78 1f       	adc	r23, r24
    13e6:	89 1f       	adc	r24, r25
    13e8:	9a 1f       	adc	r25, r26
    13ea:	a1 1d       	adc	r26, r1
    13ec:	68 0f       	add	r22, r24
    13ee:	79 1f       	adc	r23, r25
    13f0:	8a 1f       	adc	r24, r26
    13f2:	91 1d       	adc	r25, r1
    13f4:	a1 1d       	adc	r26, r1
    13f6:	6a 0f       	add	r22, r26
    13f8:	71 1d       	adc	r23, r1
    13fa:	81 1d       	adc	r24, r1
    13fc:	91 1d       	adc	r25, r1
    13fe:	a1 1d       	adc	r26, r1
    1400:	20 d0       	rcall	.+64     	; 0x1442 <__ultoa_invert+0x84>
    1402:	09 f4       	brne	.+2      	; 0x1406 <__ultoa_invert+0x48>
    1404:	68 94       	set
    1406:	3f 91       	pop	r19
    1408:	2a e0       	ldi	r18, 0x0A	; 10
    140a:	26 9f       	mul	r18, r22
    140c:	11 24       	eor	r1, r1
    140e:	30 19       	sub	r19, r0
    1410:	30 5d       	subi	r19, 0xD0	; 208
    1412:	31 93       	st	Z+, r19
    1414:	de f6       	brtc	.-74     	; 0x13cc <__ultoa_invert+0xe>
    1416:	cf 01       	movw	r24, r30
    1418:	08 95       	ret
    141a:	46 2f       	mov	r20, r22
    141c:	47 70       	andi	r20, 0x07	; 7
    141e:	40 5d       	subi	r20, 0xD0	; 208
    1420:	41 93       	st	Z+, r20
    1422:	b3 e0       	ldi	r27, 0x03	; 3
    1424:	0f d0       	rcall	.+30     	; 0x1444 <__ultoa_invert+0x86>
    1426:	c9 f7       	brne	.-14     	; 0x141a <__ultoa_invert+0x5c>
    1428:	f6 cf       	rjmp	.-20     	; 0x1416 <__ultoa_invert+0x58>
    142a:	46 2f       	mov	r20, r22
    142c:	4f 70       	andi	r20, 0x0F	; 15
    142e:	40 5d       	subi	r20, 0xD0	; 208
    1430:	4a 33       	cpi	r20, 0x3A	; 58
    1432:	18 f0       	brcs	.+6      	; 0x143a <__ultoa_invert+0x7c>
    1434:	49 5d       	subi	r20, 0xD9	; 217
    1436:	31 fd       	sbrc	r19, 1
    1438:	40 52       	subi	r20, 0x20	; 32
    143a:	41 93       	st	Z+, r20
    143c:	02 d0       	rcall	.+4      	; 0x1442 <__ultoa_invert+0x84>
    143e:	a9 f7       	brne	.-22     	; 0x142a <__ultoa_invert+0x6c>
    1440:	ea cf       	rjmp	.-44     	; 0x1416 <__ultoa_invert+0x58>
    1442:	b4 e0       	ldi	r27, 0x04	; 4
    1444:	a6 95       	lsr	r26
    1446:	97 95       	ror	r25
    1448:	87 95       	ror	r24
    144a:	77 95       	ror	r23
    144c:	67 95       	ror	r22
    144e:	ba 95       	dec	r27
    1450:	c9 f7       	brne	.-14     	; 0x1444 <__ultoa_invert+0x86>
    1452:	00 97       	sbiw	r24, 0x00	; 0
    1454:	61 05       	cpc	r22, r1
    1456:	71 05       	cpc	r23, r1
    1458:	08 95       	ret
    145a:	9b 01       	movw	r18, r22
    145c:	ac 01       	movw	r20, r24
    145e:	0a 2e       	mov	r0, r26
    1460:	06 94       	lsr	r0
    1462:	57 95       	ror	r21
    1464:	47 95       	ror	r20
    1466:	37 95       	ror	r19
    1468:	27 95       	ror	r18
    146a:	ba 95       	dec	r27
    146c:	c9 f7       	brne	.-14     	; 0x1460 <__ultoa_invert+0xa2>
    146e:	62 0f       	add	r22, r18
    1470:	73 1f       	adc	r23, r19
    1472:	84 1f       	adc	r24, r20
    1474:	95 1f       	adc	r25, r21
    1476:	a0 1d       	adc	r26, r0
    1478:	08 95       	ret

0000147a <__prologue_saves__>:
    147a:	2f 92       	push	r2
    147c:	3f 92       	push	r3
    147e:	4f 92       	push	r4
    1480:	5f 92       	push	r5
    1482:	6f 92       	push	r6
    1484:	7f 92       	push	r7
    1486:	8f 92       	push	r8
    1488:	9f 92       	push	r9
    148a:	af 92       	push	r10
    148c:	bf 92       	push	r11
    148e:	cf 92       	push	r12
    1490:	df 92       	push	r13
    1492:	ef 92       	push	r14
    1494:	ff 92       	push	r15
    1496:	0f 93       	push	r16
    1498:	1f 93       	push	r17
    149a:	cf 93       	push	r28
    149c:	df 93       	push	r29
    149e:	cd b7       	in	r28, 0x3d	; 61
    14a0:	de b7       	in	r29, 0x3e	; 62
    14a2:	ca 1b       	sub	r28, r26
    14a4:	db 0b       	sbc	r29, r27
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	f8 94       	cli
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	cd bf       	out	0x3d, r28	; 61
    14b0:	09 94       	ijmp

000014b2 <__epilogue_restores__>:
    14b2:	2a 88       	ldd	r2, Y+18	; 0x12
    14b4:	39 88       	ldd	r3, Y+17	; 0x11
    14b6:	48 88       	ldd	r4, Y+16	; 0x10
    14b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    14ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    14bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    14be:	8c 84       	ldd	r8, Y+12	; 0x0c
    14c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    14c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    14c4:	b9 84       	ldd	r11, Y+9	; 0x09
    14c6:	c8 84       	ldd	r12, Y+8	; 0x08
    14c8:	df 80       	ldd	r13, Y+7	; 0x07
    14ca:	ee 80       	ldd	r14, Y+6	; 0x06
    14cc:	fd 80       	ldd	r15, Y+5	; 0x05
    14ce:	0c 81       	ldd	r16, Y+4	; 0x04
    14d0:	1b 81       	ldd	r17, Y+3	; 0x03
    14d2:	aa 81       	ldd	r26, Y+2	; 0x02
    14d4:	b9 81       	ldd	r27, Y+1	; 0x01
    14d6:	ce 0f       	add	r28, r30
    14d8:	d1 1d       	adc	r29, r1
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	de bf       	out	0x3e, r29	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	cd bf       	out	0x3d, r28	; 61
    14e4:	ed 01       	movw	r28, r26
    14e6:	08 95       	ret

000014e8 <_exit>:
    14e8:	f8 94       	cli

000014ea <__stop_program>:
    14ea:	ff cf       	rjmp	.-2      	; 0x14ea <__stop_program>
